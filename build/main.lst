ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.Error_Handler,"ax",%progbits
  18              		.align	1
  19              		.global	Error_Handler
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	Error_Handler:
  27              		.fnstart
  28              	.LFB1346:
  29              		.file 1 "Core/Src/main.cpp"
   1:Core/Src/main.cpp **** /* USER CODE BEGIN Header */
   2:Core/Src/main.cpp **** /**
   3:Core/Src/main.cpp ****   ******************************************************************************
   4:Core/Src/main.cpp ****   * @file           : main.c
   5:Core/Src/main.cpp ****   * @brief          : Main program body
   6:Core/Src/main.cpp ****   ******************************************************************************
   7:Core/Src/main.cpp ****   * @attention
   8:Core/Src/main.cpp ****   *
   9:Core/Src/main.cpp ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  10:Core/Src/main.cpp ****   * All rights reserved.</center></h2>
  11:Core/Src/main.cpp ****   *
  12:Core/Src/main.cpp ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.cpp ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.cpp ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.cpp ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.cpp ****   *
  17:Core/Src/main.cpp ****   ******************************************************************************
  18:Core/Src/main.cpp ****   */
  19:Core/Src/main.cpp **** /* USER CODE END Header */
  20:Core/Src/main.cpp **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.cpp **** #include "main.h"
  22:Core/Src/main.cpp **** #include "adc.h"
  23:Core/Src/main.cpp **** #include "tim.h"
  24:Core/Src/main.cpp **** #include "gpio.h"
  25:Core/Src/main.cpp **** 
  26:Core/Src/main.cpp **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/main.cpp **** /* USER CODE BEGIN Includes */
  28:Core/Src/main.cpp **** #include"mine.h"
  29:Core/Src/main.cpp **** /* USER CODE END Includes */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 2


  30:Core/Src/main.cpp **** 
  31:Core/Src/main.cpp **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.cpp **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.cpp **** 
  34:Core/Src/main.cpp **** /* USER CODE END PTD */
  35:Core/Src/main.cpp **** 
  36:Core/Src/main.cpp **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.cpp **** /* USER CODE BEGIN PD */
  38:Core/Src/main.cpp **** /* USER CODE END PD */
  39:Core/Src/main.cpp **** 
  40:Core/Src/main.cpp **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.cpp **** /* USER CODE BEGIN PM */
  42:Core/Src/main.cpp **** 
  43:Core/Src/main.cpp **** /* USER CODE END PM */
  44:Core/Src/main.cpp **** 
  45:Core/Src/main.cpp **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.cpp **** 
  47:Core/Src/main.cpp **** /* USER CODE BEGIN PV */
  48:Core/Src/main.cpp **** 
  49:Core/Src/main.cpp **** /* USER CODE END PV */
  50:Core/Src/main.cpp **** 
  51:Core/Src/main.cpp **** /* Private function prototypes -----------------------------------------------*/
  52:Core/Src/main.cpp **** void SystemClock_Config(void);
  53:Core/Src/main.cpp **** /* USER CODE BEGIN PFP */
  54:Core/Src/main.cpp **** 
  55:Core/Src/main.cpp **** /* USER CODE END PFP */
  56:Core/Src/main.cpp **** 
  57:Core/Src/main.cpp **** /* Private user code ---------------------------------------------------------*/
  58:Core/Src/main.cpp **** /* USER CODE BEGIN 0 */
  59:Core/Src/main.cpp **** 
  60:Core/Src/main.cpp **** /* USER CODE END 0 */
  61:Core/Src/main.cpp **** 
  62:Core/Src/main.cpp **** /**
  63:Core/Src/main.cpp ****   * @brief  The application entry point.
  64:Core/Src/main.cpp ****   * @retval int
  65:Core/Src/main.cpp ****   */
  66:Core/Src/main.cpp **** int main(void)
  67:Core/Src/main.cpp **** {
  68:Core/Src/main.cpp ****   /* USER CODE BEGIN 1 */
  69:Core/Src/main.cpp ****   std::vector<int>v;
  70:Core/Src/main.cpp ****   /* USER CODE END 1 */
  71:Core/Src/main.cpp **** 
  72:Core/Src/main.cpp ****   /* MCU Configuration--------------------------------------------------------*/
  73:Core/Src/main.cpp **** 
  74:Core/Src/main.cpp ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  75:Core/Src/main.cpp ****   HAL_Init();
  76:Core/Src/main.cpp **** 
  77:Core/Src/main.cpp ****   /* USER CODE BEGIN Init */
  78:Core/Src/main.cpp **** 
  79:Core/Src/main.cpp ****   /* USER CODE END Init */
  80:Core/Src/main.cpp **** 
  81:Core/Src/main.cpp ****   /* Configure the system clock */
  82:Core/Src/main.cpp ****   SystemClock_Config();
  83:Core/Src/main.cpp **** 
  84:Core/Src/main.cpp ****   /* USER CODE BEGIN SysInit */
  85:Core/Src/main.cpp **** 
  86:Core/Src/main.cpp ****   /* USER CODE END SysInit */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 3


  87:Core/Src/main.cpp **** 
  88:Core/Src/main.cpp ****   /* Initialize all configured peripherals */
  89:Core/Src/main.cpp ****   MX_GPIO_Init();
  90:Core/Src/main.cpp ****   MX_ADC1_Init();
  91:Core/Src/main.cpp ****   MX_TIM2_Init();
  92:Core/Src/main.cpp ****   MX_TIM4_Init();
  93:Core/Src/main.cpp ****   MX_TIM9_Init();
  94:Core/Src/main.cpp ****   MX_TIM12_Init();
  95:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
  96:Core/Src/main.cpp **** 
  97:Core/Src/main.cpp ****   /* USER CODE END 2 */
  98:Core/Src/main.cpp **** 
  99:Core/Src/main.cpp ****   /* Infinite loop */
 100:Core/Src/main.cpp ****   /* USER CODE BEGIN WHILE */
 101:Core/Src/main.cpp ****   while (1)
 102:Core/Src/main.cpp ****   {
 103:Core/Src/main.cpp ****     /* USER CODE END WHILE */
 104:Core/Src/main.cpp **** 
 105:Core/Src/main.cpp ****     /* USER CODE BEGIN 3 */
 106:Core/Src/main.cpp ****   }
 107:Core/Src/main.cpp ****   /* USER CODE END 3 */
 108:Core/Src/main.cpp **** }
 109:Core/Src/main.cpp **** 
 110:Core/Src/main.cpp **** /**
 111:Core/Src/main.cpp ****   * @brief System Clock Configuration
 112:Core/Src/main.cpp ****   * @retval None
 113:Core/Src/main.cpp ****   */
 114:Core/Src/main.cpp **** void SystemClock_Config(void)
 115:Core/Src/main.cpp **** {
 116:Core/Src/main.cpp ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 117:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 118:Core/Src/main.cpp **** 
 119:Core/Src/main.cpp ****   /** Configure the main internal regulator output voltage
 120:Core/Src/main.cpp ****   */
 121:Core/Src/main.cpp ****   __HAL_RCC_PWR_CLK_ENABLE();
 122:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 123:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 124:Core/Src/main.cpp ****   * in the RCC_OscInitTypeDef structure.
 125:Core/Src/main.cpp ****   */
 126:Core/Src/main.cpp ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 127:Core/Src/main.cpp ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 128:Core/Src/main.cpp ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 129:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 130:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 131:Core/Src/main.cpp ****   {
 132:Core/Src/main.cpp ****     Error_Handler();
 133:Core/Src/main.cpp ****   }
 134:Core/Src/main.cpp ****   /** Initializes the CPU, AHB and APB buses clocks
 135:Core/Src/main.cpp ****   */
 136:Core/Src/main.cpp ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 137:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 138:Core/Src/main.cpp ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 139:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 140:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 141:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 142:Core/Src/main.cpp **** 
 143:Core/Src/main.cpp ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 4


 144:Core/Src/main.cpp ****   {
 145:Core/Src/main.cpp ****     Error_Handler();
 146:Core/Src/main.cpp ****   }
 147:Core/Src/main.cpp **** }
 148:Core/Src/main.cpp **** 
 149:Core/Src/main.cpp **** /* USER CODE BEGIN 4 */
 150:Core/Src/main.cpp **** 
 151:Core/Src/main.cpp **** /* USER CODE END 4 */
 152:Core/Src/main.cpp **** 
 153:Core/Src/main.cpp **** /**
 154:Core/Src/main.cpp ****   * @brief  This function is executed in case of error occurrence.
 155:Core/Src/main.cpp ****   * @retval None
 156:Core/Src/main.cpp ****   */
 157:Core/Src/main.cpp **** void Error_Handler(void)
 158:Core/Src/main.cpp **** {
  30              		.loc 1 158 1 view -0
  31              		.cfi_startproc
  32              		@ Volatile: function does not return.
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
 159:Core/Src/main.cpp ****   /* USER CODE BEGIN Error_Handler_Debug */
 160:Core/Src/main.cpp ****   /* User can add his own implementation to report the HAL error return state */
 161:Core/Src/main.cpp ****   __disable_irq();
  36              		.loc 1 161 3 view .LVU1
  37              	.LBB81:
  38              	.LBI81:
  39              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 5


  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 6


  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
  40              		.loc 2 140 27 view .LVU2
  41              	.LBB82:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 7


 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  42              		.loc 2 142 3 view .LVU3
  43              		.syntax unified
  44              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  45 0000 72B6     		cpsid i
  46              	@ 0 "" 2
  47              		.thumb
  48              		.syntax unified
  49              	.L2:
  50              	.LBE82:
  51              	.LBE81:
 162:Core/Src/main.cpp ****   while (1)
  52              		.loc 1 162 3 discriminator 1 view .LVU4
  53              		.loc 1 162 3 discriminator 1 view .LVU5
  54 0002 FEE7     		b	.L2
  55              		.cfi_endproc
  56              	.LFE1346:
  57              		.cantunwind
  58              		.fnend
  60              		.section	.text._Z18SystemClock_Configv,"ax",%progbits
  61              		.align	1
  62              		.global	_Z18SystemClock_Configv
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv4-sp-d16
  68              	_Z18SystemClock_Configv:
  69              		.fnstart
  70              	.LFB1345:
 115:Core/Src/main.cpp ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  71              		.loc 1 115 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 80
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75 0000 00B5     		push	{lr}
  76              		.save {lr}
  77              	.LCFI0:
  78              		.cfi_def_cfa_offset 4
  79              		.cfi_offset 14, -4
  80              		.pad #84
  81 0002 95B0     		sub	sp, sp, #84
  82              	.LCFI1:
  83              		.cfi_def_cfa_offset 88
 116:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  84              		.loc 1 116 3 view .LVU7
 116:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  85              		.loc 1 116 22 is_stmt 0 view .LVU8
  86 0004 3022     		movs	r2, #48
  87 0006 0021     		movs	r1, #0
  88 0008 08A8     		add	r0, sp, #32
  89 000a FFF7FEFF 		bl	memset
  90              	.LVL0:
 117:Core/Src/main.cpp **** 
  91              		.loc 1 117 3 is_stmt 1 view .LVU9
 117:Core/Src/main.cpp **** 
  92              		.loc 1 117 22 is_stmt 0 view .LVU10
  93 000e 0023     		movs	r3, #0
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 8


  94 0010 0393     		str	r3, [sp, #12]
  95 0012 0493     		str	r3, [sp, #16]
  96 0014 0593     		str	r3, [sp, #20]
  97 0016 0693     		str	r3, [sp, #24]
  98 0018 0793     		str	r3, [sp, #28]
 121:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  99              		.loc 1 121 3 is_stmt 1 view .LVU11
 100              	.LBB83:
 121:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 101              		.loc 1 121 3 view .LVU12
 102 001a 0193     		str	r3, [sp, #4]
 121:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 103              		.loc 1 121 3 view .LVU13
 104 001c 184A     		ldr	r2, .L9
 105 001e 116C     		ldr	r1, [r2, #64]
 106 0020 41F08051 		orr	r1, r1, #268435456
 107 0024 1164     		str	r1, [r2, #64]
 121:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 108              		.loc 1 121 3 view .LVU14
 109 0026 126C     		ldr	r2, [r2, #64]
 110 0028 02F08052 		and	r2, r2, #268435456
 111 002c 0192     		str	r2, [sp, #4]
 121:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 112              		.loc 1 121 3 view .LVU15
 113 002e 019A     		ldr	r2, [sp, #4]
 114              	.LBE83:
 122:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 115              		.loc 1 122 3 view .LVU16
 116              	.LBB84:
 122:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 117              		.loc 1 122 3 view .LVU17
 118 0030 0293     		str	r3, [sp, #8]
 122:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 119              		.loc 1 122 3 view .LVU18
 120 0032 144A     		ldr	r2, .L9+4
 121 0034 1168     		ldr	r1, [r2]
 122 0036 41F48041 		orr	r1, r1, #16384
 123 003a 1160     		str	r1, [r2]
 122:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 124              		.loc 1 122 3 view .LVU19
 125 003c 1268     		ldr	r2, [r2]
 126 003e 02F48042 		and	r2, r2, #16384
 127 0042 0292     		str	r2, [sp, #8]
 122:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 128              		.loc 1 122 3 view .LVU20
 129 0044 029A     		ldr	r2, [sp, #8]
 130              	.LBE84:
 126:Core/Src/main.cpp ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 131              		.loc 1 126 3 view .LVU21
 126:Core/Src/main.cpp ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 132              		.loc 1 126 36 is_stmt 0 view .LVU22
 133 0046 0222     		movs	r2, #2
 134 0048 0892     		str	r2, [sp, #32]
 127:Core/Src/main.cpp ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 135              		.loc 1 127 3 is_stmt 1 view .LVU23
 127:Core/Src/main.cpp ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 136              		.loc 1 127 30 is_stmt 0 view .LVU24
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 9


 137 004a 0122     		movs	r2, #1
 138 004c 0B92     		str	r2, [sp, #44]
 128:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 139              		.loc 1 128 3 is_stmt 1 view .LVU25
 128:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 140              		.loc 1 128 41 is_stmt 0 view .LVU26
 141 004e 1022     		movs	r2, #16
 142 0050 0C92     		str	r2, [sp, #48]
 129:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 143              		.loc 1 129 3 is_stmt 1 view .LVU27
 129:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 144              		.loc 1 129 34 is_stmt 0 view .LVU28
 145 0052 0E93     		str	r3, [sp, #56]
 130:Core/Src/main.cpp ****   {
 146              		.loc 1 130 3 is_stmt 1 view .LVU29
 130:Core/Src/main.cpp ****   {
 147              		.loc 1 130 24 is_stmt 0 view .LVU30
 148 0054 08A8     		add	r0, sp, #32
 149 0056 FFF7FEFF 		bl	HAL_RCC_OscConfig
 150              	.LVL1:
 130:Core/Src/main.cpp ****   {
 151              		.loc 1 130 3 view .LVU31
 152 005a 68B9     		cbnz	r0, .L7
 136:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 153              		.loc 1 136 3 is_stmt 1 view .LVU32
 136:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 154              		.loc 1 136 31 is_stmt 0 view .LVU33
 155 005c 0F23     		movs	r3, #15
 156 005e 0393     		str	r3, [sp, #12]
 138:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 157              		.loc 1 138 3 is_stmt 1 view .LVU34
 138:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 158              		.loc 1 138 34 is_stmt 0 view .LVU35
 159 0060 0021     		movs	r1, #0
 160 0062 0491     		str	r1, [sp, #16]
 139:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 161              		.loc 1 139 3 is_stmt 1 view .LVU36
 139:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 162              		.loc 1 139 35 is_stmt 0 view .LVU37
 163 0064 0591     		str	r1, [sp, #20]
 140:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 164              		.loc 1 140 3 is_stmt 1 view .LVU38
 140:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 165              		.loc 1 140 36 is_stmt 0 view .LVU39
 166 0066 0691     		str	r1, [sp, #24]
 141:Core/Src/main.cpp **** 
 167              		.loc 1 141 3 is_stmt 1 view .LVU40
 141:Core/Src/main.cpp **** 
 168              		.loc 1 141 36 is_stmt 0 view .LVU41
 169 0068 0791     		str	r1, [sp, #28]
 143:Core/Src/main.cpp ****   {
 170              		.loc 1 143 3 is_stmt 1 view .LVU42
 143:Core/Src/main.cpp ****   {
 171              		.loc 1 143 26 is_stmt 0 view .LVU43
 172 006a 03A8     		add	r0, sp, #12
 173 006c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 174              	.LVL2:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 10


 143:Core/Src/main.cpp ****   {
 175              		.loc 1 143 3 view .LVU44
 176 0070 20B9     		cbnz	r0, .L8
 147:Core/Src/main.cpp **** 
 177              		.loc 1 147 1 view .LVU45
 178 0072 15B0     		add	sp, sp, #84
 179              	.LCFI2:
 180              		.cfi_remember_state
 181              		.cfi_def_cfa_offset 4
 182              		@ sp needed
 183 0074 5DF804FB 		ldr	pc, [sp], #4
 184              	.L7:
 185              	.LCFI3:
 186              		.cfi_restore_state
 132:Core/Src/main.cpp ****   }
 187              		.loc 1 132 5 is_stmt 1 view .LVU46
 132:Core/Src/main.cpp ****   }
 188              		.loc 1 132 18 is_stmt 0 view .LVU47
 189 0078 FFF7FEFF 		bl	Error_Handler
 190              	.LVL3:
 191              	.L8:
 145:Core/Src/main.cpp ****   }
 192              		.loc 1 145 5 is_stmt 1 view .LVU48
 145:Core/Src/main.cpp ****   }
 193              		.loc 1 145 18 is_stmt 0 view .LVU49
 194 007c FFF7FEFF 		bl	Error_Handler
 195              	.LVL4:
 196              	.L10:
 197              		.align	2
 198              	.L9:
 199 0080 00380240 		.word	1073887232
 200 0084 00700040 		.word	1073770496
 201              		.cfi_endproc
 202              	.LFE1345:
 203              		.fnend
 205              		.section	.text.main,"ax",%progbits
 206              		.align	1
 207              		.global	main
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu fpv4-sp-d16
 213              	main:
 214              		.fnstart
 215              	.LFB1333:
  67:Core/Src/main.cpp ****   /* USER CODE BEGIN 1 */
 216              		.loc 1 67 1 is_stmt 1 view -0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 16
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220 0000 00B5     		push	{lr}
 221              		.save {lr}
 222              	.LCFI4:
 223              		.cfi_def_cfa_offset 4
 224              		.cfi_offset 14, -4
 225              		.pad #20
 226 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 11


 227              	.LCFI5:
 228              		.cfi_def_cfa_offset 24
  69:Core/Src/main.cpp ****   /* USER CODE END 1 */
 229              		.loc 1 69 3 view .LVU51
 230              	.LVL5:
 231              	.LBB111:
 232              	.LBI111:
 233              		.file 3 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Vector implementation -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** /*
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Copyright (c) 1994
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Hewlett-Packard Company
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * representations about the suitability of this software for any
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Copyright (c) 1996
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * representations about the suitability of this  software for any
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 12


  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** /** @file bits/stl_vector.h
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  */
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #ifndef _STL_VECTOR_H
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _STL_VECTOR_H 1
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <bits/functexcept.h>
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <bits/concept_check.h>
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <initializer_list>
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus > 201703L
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # include <compare>
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <debug/assertions.h>
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** extern "C" void
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  const void*, const void*);
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** {
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     struct _Vector_base
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     {
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        	pointer;
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       struct _Vector_impl_data
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer _M_start;
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer _M_finish;
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer _M_end_of_storage;
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 13


 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_start = __x._M_start;
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // information used by TBAA.
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_copy_data(__x);
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       };
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       struct _Vector_impl
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type()
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  struct _Asan
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ::size_type size_type;
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 14


 164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    struct _Grow
 169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      void _M_grew(size_type) { }
 172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    };
 173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  };
 174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	template<typename _Up>
 177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ::size_type size_type;
 181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
 190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      if (__impl._M_start)
 203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
 205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 206:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    struct _Reinit
 208:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 209:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      {
 211:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      }
 214:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 215:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ~_Reinit()
 216:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      {
 217:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		if (_M_impl._M_start)
 219:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    _M_impl._M_finish);
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 15


 221:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      }
 222:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 223:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 225:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 226:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 229:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    };
 230:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 231:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    struct _Grow
 233:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 234:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 238:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 240:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 242:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 243:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 246:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    private:
 247:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      size_type _M_n;
 249:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    };
 250:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  };
 251:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 252:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       };
 271:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 272:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 273:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Alloc allocator_type;
 274:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 275:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Tp_alloc_type&
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 16


 278:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 279:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const _Tp_alloc_type&
 280:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 282:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 283:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       allocator_type
 284:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 287:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base() = default;
 289:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 290:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base() { }
 291:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 292:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 293:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a) { }
 295:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 296:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Kept for ABI compatibility.
 297:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(size_t __n)
 299:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl()
 300:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_create_storage(__n); }
 301:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 302:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a)
 305:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_create_storage(__n); }
 306:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 307:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 308:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 310:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Kept for ABI compatibility.
 311:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 315:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a)
 317:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 318:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else
 321:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 322:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _M_create_storage(__n);
 324:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
 325:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 326:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # endif
 327:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 328:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { }
 331:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 332:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 334:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 17


 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 337:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 338:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 339:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 340:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_impl _M_impl;
 341:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 342:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       pointer
 343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_allocate(size_t __n)
 344:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 345:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 348:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 349:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 351:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 352:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__p)
 354:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 356:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 357:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
 358:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_create_storage(size_t __n)
 360:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 361:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 363:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 365:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     };
 366:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 367:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   /**
 368:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  individual elements in any order.
 370:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 371:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @ingroup sequences
 372:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 373:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 376:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 382:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  also provided as with C-style arrays.
 387:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   */
 388:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     {
 391:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 18


 392:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Concept requirements.
 393:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # if __cplusplus < 201103L
 395:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # endif
 397:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 399:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 400:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 401:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # endif
 407:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 408:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 409:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 413:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 414:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Tp					value_type;
 415:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 420:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator;
 422:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef size_t					size_type;
 425:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Alloc					allocator_type;
 427:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 428:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     private:
 429:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 430:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static constexpr bool
 431:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 433:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  std::declval<pointer>(),
 435:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  std::declval<pointer>(),
 436:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 438:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 439:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static constexpr bool
 440:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return false; }
 442:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 443:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static constexpr bool
 444:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_use_relocate()
 445:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 446:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 19


 449:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 451:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 452:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static pointer
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 456:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 458:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 459:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static pointer
 460:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return __result; }
 463:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 464:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static pointer
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 468:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 471:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif // C++11
 472:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 473:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
 474:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_allocate;
 475:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_deallocate;
 476:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_impl;
 477:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 479:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 480:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 483:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 484:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 486:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 487:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector() = default;
 234              		.loc 3 487 7 view .LVU52
 235              	.LBB112:
 236              	.LBI112:
 288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 237              		.loc 3 288 7 view .LVU53
 238              	.LBB113:
 239              	.LBI113:
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 240              		.loc 3 131 2 view .LVU54
 241              	.LBB114:
 242              	.LBB115:
 243              	.LBI115:
 244              		.file 4 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Allocators -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 20


   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** /*
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * Copyright (c) 1996-1997
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  *
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * that both that copyright notice and this permission notice appear
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * representations about the suitability of this software for any
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  */
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** /** @file bits/allocator.h
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  *  This is an internal header file, included by other library headers.
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  */
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #ifndef _ALLOCATOR_H
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #define _ALLOCATOR_H 1
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #include <bits/memoryfwd.h>
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #include <type_traits>
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** {
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   /**
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  @addtogroup allocators
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  @{
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    */
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 21


  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   /// allocator<void> specialization.
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   template<>
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     class allocator<void>
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     {
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     public:
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef void        value_type;
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef size_t      size_type;
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef ptrdiff_t   difference_type;
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus <= 201703L
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef void*       pointer;
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef const void* const_pointer;
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Tp1>
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	struct rebind
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #else
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator() = default;
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Up>
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	constexpr
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	allocator(const allocator<_Up>&) { }
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif // ! C++20
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L && __cplusplus <= 201703L
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type is_always_equal;
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Up, typename... _Args>
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	void
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Up>
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	void
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	destroy(_Up* __p)
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ __p->~_Up(); }
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif // C++11 to C++17
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     };
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   /**
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  for further details.
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    */
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   template<typename _Tp>
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     class allocator : public __allocator_base<_Tp>
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     {
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     public:
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef _Tp        value_type;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 22


 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef size_t     size_type;
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef ptrdiff_t  difference_type;
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus <= 201703L
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef _Tp*       pointer;
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef const _Tp* const_pointer;
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef _Tp&       reference;
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef const _Tp& const_reference;
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Tp1>
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	struct rebind
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type is_always_equal;
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       _GLIBCXX20_CONSTEXPR
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 245              		.loc 4 144 7 view .LVU55
 246              	.LBB116:
 247              	.LBI116:
 248              		.file 5 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\ext\\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** /** @file ext/new_allocator.h
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****  */
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 23


  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <bits/c++config.h>
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <new>
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <bits/functexcept.h>
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <bits/move.h>
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus >= 201103L
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <type_traits>
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** {
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****   /**
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  @ingroup allocators
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *    - all allocation calls operator new
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *    - all deallocation calls operator delete
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    */
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****   template<typename _Tp>
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****     class new_allocator
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****     {
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****     public:
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef _Tp        value_type;
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef std::size_t     size_type;
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus <= 201703L
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef _Tp*       pointer;
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef const _Tp* const_pointer;
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef _Tp&       reference;
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef const _Tp& const_reference;
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       template<typename _Tp1>
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	struct rebind
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus >= 201103L
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 249              		.loc 5 79 7 view .LVU56
 250              		.loc 5 79 7 is_stmt 0 view .LVU57
 251              	.LBE116:
 252              	.LBE115:
 253              	.LBB117:
 254              	.LBI117:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 24


  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 255              		.loc 3 97 2 is_stmt 1 view .LVU58
 256              	.LBB118:
 257              	.LBB119:
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 258              		.loc 3 98 47 is_stmt 0 view .LVU59
 259 0004 0023     		movs	r3, #0
 260 0006 0193     		str	r3, [sp, #4]
 261 0008 0293     		str	r3, [sp, #8]
 262 000a 0393     		str	r3, [sp, #12]
 263              	.LVL6:
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 264              		.loc 3 98 47 view .LVU60
 265              	.LBE119:
 266              	.LBE118:
 267              	.LBE117:
 268              	.LBE114:
 269              	.LBE113:
 270              	.LBE112:
 271              	.LBE111:
  75:Core/Src/main.cpp **** 
 272              		.loc 1 75 3 is_stmt 1 view .LVU61
 273              	.LEHB0:
  75:Core/Src/main.cpp **** 
 274              		.loc 1 75 11 is_stmt 0 view .LVU62
 275 000c FFF7FEFF 		bl	HAL_Init
 276              	.LVL7:
  82:Core/Src/main.cpp **** 
 277              		.loc 1 82 3 is_stmt 1 view .LVU63
  82:Core/Src/main.cpp **** 
 278              		.loc 1 82 21 is_stmt 0 view .LVU64
 279 0010 FFF7FEFF 		bl	_Z18SystemClock_Configv
 280              	.LVL8:
  89:Core/Src/main.cpp ****   MX_ADC1_Init();
 281              		.loc 1 89 3 is_stmt 1 view .LVU65
  89:Core/Src/main.cpp ****   MX_ADC1_Init();
 282              		.loc 1 89 15 is_stmt 0 view .LVU66
 283 0014 FFF7FEFF 		bl	MX_GPIO_Init
 284              	.LVL9:
  90:Core/Src/main.cpp ****   MX_TIM2_Init();
 285              		.loc 1 90 3 is_stmt 1 view .LVU67
  90:Core/Src/main.cpp ****   MX_TIM2_Init();
 286              		.loc 1 90 15 is_stmt 0 view .LVU68
 287 0018 FFF7FEFF 		bl	MX_ADC1_Init
 288              	.LVL10:
  91:Core/Src/main.cpp ****   MX_TIM4_Init();
 289              		.loc 1 91 3 is_stmt 1 view .LVU69
  91:Core/Src/main.cpp ****   MX_TIM4_Init();
 290              		.loc 1 91 15 is_stmt 0 view .LVU70
 291 001c FFF7FEFF 		bl	MX_TIM2_Init
 292              	.LVL11:
  92:Core/Src/main.cpp ****   MX_TIM9_Init();
 293              		.loc 1 92 3 is_stmt 1 view .LVU71
  92:Core/Src/main.cpp ****   MX_TIM9_Init();
 294              		.loc 1 92 15 is_stmt 0 view .LVU72
 295 0020 FFF7FEFF 		bl	MX_TIM4_Init
 296              	.LVL12:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 25


  93:Core/Src/main.cpp ****   MX_TIM12_Init();
 297              		.loc 1 93 3 is_stmt 1 view .LVU73
  93:Core/Src/main.cpp ****   MX_TIM12_Init();
 298              		.loc 1 93 15 is_stmt 0 view .LVU74
 299 0024 FFF7FEFF 		bl	MX_TIM9_Init
 300              	.LVL13:
  94:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 301              		.loc 1 94 3 is_stmt 1 view .LVU75
  94:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 302              		.loc 1 94 16 is_stmt 0 view .LVU76
 303 0028 FFF7FEFF 		bl	MX_TIM12_Init
 304              	.LVL14:
 305              	.LEHE0:
 306              	.L12:
 101:Core/Src/main.cpp ****   {
 307              		.loc 1 101 3 is_stmt 1 discriminator 1 view .LVU77
 101:Core/Src/main.cpp ****   {
 308              		.loc 1 101 3 discriminator 1 view .LVU78
 309 002c FEE7     		b	.L12
 310              	.L15:
 311              	.LVL15:
 312              	.LBB120:
 313              	.LBI120:
 488:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 489:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector() { }
 490:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 492:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 493:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator object.
 495:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 496:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       explicit
 497:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__a) { }
 499:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 500:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 501:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 502:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 505:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 506:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  constructed elements.
 508:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 509:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       explicit
 510:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 511:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_default_initialize(__n); }
 513:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 514:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 515:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 518:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 519:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 520:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 521:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 26


 522:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 527:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 528:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 531:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 532:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 533:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 534:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 535:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       explicit
 536:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 537:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 539:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 540:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 541:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 542:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 543:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 546:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @a __x  will not be copied
 548:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 550:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 553:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(const vector& __x)
 554:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__x.size(),
 555:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 556:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 557:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
 558:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 560:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 561:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 562:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 563:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 564:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 565:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector move constructor.
 566:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 567:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  moved instance.
 569:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 570:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector.
 571:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 572:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&&) noexcept = default;
 573:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 574:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Copy constructor with alternative allocator
 575:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__x.size(), __a)
 577:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 578:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 27


 579:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 581:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 582:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 583:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 584:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     private:
 585:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { }
 588:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 589:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__m)
 591:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 592:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else if (!__rv.empty())
 595:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 596:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    this->_M_impl._M_finish =
 598:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  this->_M_impl._M_start,
 600:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  _M_get_Tp_allocator());
 601:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    __rv.clear();
 602:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
 603:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 604:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 605:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 606:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Move constructor with alternative allocator
 607:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       noexcept( noexcept(
 609:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { }
 613:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 614:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 615:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 617:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 618:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 619:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  initializer_list @a __l.
 621:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 622:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 625:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 627:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__a)
 628:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 629:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 631:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 632:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 633:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 634:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 635:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Builds a %vector from a range.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 28


 636:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
 637:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last  An input iterator.
 638:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 639:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 640:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  [first,last).
 642:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 643:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 648:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 650:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 651:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
 652:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 655:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Base(__a)
 656:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 657:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			      std::__iterator_category(__first));
 659:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 660:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 661:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
 662:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 664:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Base(__a)
 665:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 666:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 670:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 671:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 672:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 673:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  responsibility.
 677:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 678:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 314              		.loc 3 678 7 view .LVU79
 315              	.LBB121:
 316              	.LBB122:
 317              	.LBI122:
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 318              		.loc 3 276 7 view .LVU80
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 319              		.loc 3 276 7 is_stmt 0 view .LVU81
 320              	.LBE122:
 321              	.LBB123:
 322              	.LBI123:
 323              		.file 6 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 29


   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Copyright (C) 2011-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** /** @file bits/alloc_traits.h
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****  */
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #include <bits/stl_construct.h>
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #include <bits/memoryfwd.h>
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201103L
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # include <bits/allocator.h>
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # include <bits/ptr_traits.h>
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # include <ext/numeric_traits.h>
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** {
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201103L
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   struct __allocator_traits_base
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   {
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp, typename _Up>
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       struct __rebind<_Tp, _Up,
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   protected:
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 30


  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   };
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Up>
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     using __alloc_rebind
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   /**
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * @ingroup allocators
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   */
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator type
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef _Alloc allocator_type;
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocated type
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's pointer type.
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     private:
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Ptr
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	};
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using type = _Func<_Alloc>;
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	};
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Diff
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 31


 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _PtrT>
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _DiffT>
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     public:
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's const pointer type.
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's void pointer type.
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's difference type
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's size type
 166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 32


 174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_copy_assignment
 179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_move_assignment
 188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_swap
 197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using is_always_equal
 206:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 207:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 208:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 209:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 210:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 211:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 212:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 213:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     private:
 214:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 215:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr auto
 216:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 217:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 218:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 219:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 220:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 221:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr pointer
 222:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 223:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.allocate(__n); }
 224:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 225:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 226:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct __construct_helper
 227:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 228:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  template<typename _Alloc2,
 229:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 230:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 33


 231:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    static true_type __test(int);
 232:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 233:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  template<typename>
 234:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    static false_type __test(...);
 235:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 236:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 237:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	};
 238:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 239:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 240:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using __has_construct
 241:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 242:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 243:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 245:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 246:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 247:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 248:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 249:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 250:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 251:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 252:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 253:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 254:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 255:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 256:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 257:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 258:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 259:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 261:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 262:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 263:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 264:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 265:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 266:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 267:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 268:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ __a.destroy(__p); }
 269:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 270:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 271:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 272:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 273:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 274:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ std::_Destroy(__p); }
 275:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 277:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr auto
 278:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 279:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.max_size())
 280:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.max_size(); }
 281:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 282:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 283:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr size_type
 284:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 285:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 286:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 287:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 34


 288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 289:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    / sizeof(value_type);
 290:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 291:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 292:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 293:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr auto
 294:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 295:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 296:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 297:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 298:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 299:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr _Alloc2
 300:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 301:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a; }
 302:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     public:
 304:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 305:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 306:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 307:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 308:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 309:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 310:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 311:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 312:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 313:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 314:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 315:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 316:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 317:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 318:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 319:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 320:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 321:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 322:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *          of type @c value_type
 323:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 324:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 325:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 326:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 327:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 328:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 329:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 330:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 331:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 332:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 334:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 337:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 338:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 339:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 340:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 341:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 342:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 344:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Construct an object of type @a _Tp
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 35


 345:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 347:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 348:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 349:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 351:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 352:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  arguments @a __args...
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 354:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 355:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 356:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 357:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 358:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 360:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 361:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 362:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 363:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 364:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 365:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 366:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 367:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 368:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 369:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 370:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 371:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 372:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 373:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 374:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 375:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 376:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 377:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  The maximum supported allocation size
 378:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 379:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 380:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 381:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 382:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 383:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 384:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 385:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 386:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return _S_max_size(__a, 0); }
 387:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 388:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 389:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 390:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 391:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 392:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 393:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 394:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 395:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 396:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 397:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 398:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return _S_select(__rhs, 0); }
 399:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     };
 400:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 401:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus > 201703L
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 36


 402:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 403:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 404:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 405:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   /// Partial specialization for std::allocator.
 406:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 407:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 408:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 409:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator type
 410:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 411:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 412:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocated type
 413:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using value_type = _Tp;
 414:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 415:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's pointer type.
 416:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using pointer = _Tp*;
 417:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 418:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's const pointer type.
 419:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_pointer = const _Tp*;
 420:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 421:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's void pointer type.
 422:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using void_pointer = void*;
 423:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 424:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's const void pointer type.
 425:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_void_pointer = const void*;
 426:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 427:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's difference type
 428:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 429:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 430:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's size type
 431:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using size_type = std::size_t;
 432:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 433:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 434:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 435:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 436:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on move assignment
 437:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 438:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 439:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on swap
 440:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_swap = false_type;
 441:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 442:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 443:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using is_always_equal = true_type;
 444:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 445:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up>
 446:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 447:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 448:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up>
 449:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 450:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 451:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 452:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 454:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 455:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 456:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 457:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 458:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 37


 459:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 460:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 461:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 462:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 463:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 464:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 466:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 467:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 468:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *          of type @c value_type
 469:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 470:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 471:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 472:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 473:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 474:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       {
 475:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 476:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return __a.allocate(__n, __hint);
 477:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 478:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return __a.allocate(__n);
 479:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 480:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       }
 481:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 482:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 483:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 484:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 485:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 486:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 487:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 488:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 489:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 490:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 492:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 493:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 494:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 495:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 496:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 497:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 498:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *	       an object of type `_Up`.
 499:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 500:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 501:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 502:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 503:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 504:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 505:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up, typename... _Args>
 506:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 507:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 508:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		  _Args&&... __args)
 509:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 510:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 511:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 512:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 513:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 514:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 515:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 38


 516:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 517:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 518:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 519:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 520:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 521:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 522:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 523:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 524:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 525:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up>
 526:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 527:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 528:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 529:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 530:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 531:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  __a.destroy(__p);
 532:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 533:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  std::destroy_at(__p);
 534:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 535:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 536:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 537:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 538:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  The maximum supported allocation size
 539:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 540:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __a.max_size()
 541:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 542:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 543:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 544:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       {
 545:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 546:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return __a.max_size();
 547:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 548:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 549:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 550:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       }
 551:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 552:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 553:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 554:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 555:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __rhs
 556:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 557:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 558:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 559:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return __rhs; }
 560:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     };
 561:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 562:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus < 201703L
 563:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 564:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void
 565:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 566:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { __one = __two; }
 567:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 568:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 569:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void
 570:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 571:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { }
 572:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 39


 573:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 574:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 575:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 576:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 577:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 578:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 579:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 580:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201703L
 581:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       if constexpr (__pocca::value)
 582:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	__one = __two;
 583:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 584:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 585:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 586:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 587:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 588:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 589:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     constexpr _Alloc
 590:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 591:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 592:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 593:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 594:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 595:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 596:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus < 201703L
 597:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 598:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 599:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { __one = std::move(__two); }
 600:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 601:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 602:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 603:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { }
 604:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 605:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 606:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 607:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 608:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 609:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 610:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 611:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 612:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201703L
 613:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       if constexpr (__pocma::value)
 614:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	__one = std::move(__two);
 615:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 616:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 617:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 618:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 619:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 620:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus < 201703L
 621:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 622:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 623:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 624:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using std::swap;
 625:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       swap(__one, __two);
 626:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 627:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 628:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 629:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 40


 630:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { }
 631:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 632:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 633:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 634:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 635:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 636:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 637:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 638:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 639:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201703L
 640:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       if constexpr (__pocs::value)
 641:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 642:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using std::swap;
 643:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  swap(__one, __two);
 644:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 645:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 646:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 647:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 648:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 649:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 650:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 651:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 652:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	   typename = void>
 653:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_alloc_insertable_impl
 654:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : false_type
 655:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 656:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 657:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 658:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 659:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 660:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 661:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		   std::declval<_Tp>()))>>
 662:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : true_type
 663:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 664:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 665:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 666:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 667:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 668:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 669:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_copy_insertable
 670:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 671:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 672:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 673:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 674:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 675:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 676:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 677:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : is_copy_constructible<_Tp>
 678:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 679:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 680:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 681:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 682:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 683:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 684:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_move_insertable
 685:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 686:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 41


 687:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 688:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 689:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 690:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 691:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : is_move_constructible<_Tp>
 692:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 693:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 694:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // Trait to detect Allocator-like types.
 695:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename = void>
 696:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_allocator : false_type { };
 697:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 698:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 699:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_allocator<_Alloc,
 700:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 701:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 702:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : true_type { };
 703:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 704:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 705:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     using _RequireAllocator
 706:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 707:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 708:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 709:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     using _RequireNotAllocator
 710:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 711:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif // C++11
 712:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 713:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   /**
 714:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 715:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 716:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 717:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    */
 718:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 719:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 720:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     void
 721:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 722:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	     _Allocator& __alloc)
 723:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 724:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       for (; __first != __last; ++__first)
 725:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus < 201103L
 726:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 727:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 728:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 729:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 					      std::__addressof(*__first));
 730:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 731:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 732:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 733:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 734:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void
 735:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 324              		.loc 6 735 5 is_stmt 1 view .LVU82
 325              		.loc 6 735 5 is_stmt 0 view .LVU83
 326              	.LBE123:
 327              	.LBB124:
 328              	.LBI124:
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 329              		.loc 3 333 7 is_stmt 1 view .LVU84
 330              	.LBB125:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 42


 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 331              		.loc 3 335 15 is_stmt 0 view .LVU85
 332 002e 0198     		ldr	r0, [sp, #4]
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 333              		.loc 3 336 17 view .LVU86
 334 0030 039B     		ldr	r3, [sp, #12]
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 335              		.loc 3 336 35 view .LVU87
 336 0032 191A     		subs	r1, r3, r0
 337              	.LVL16:
 338              	.LBB126:
 339              	.LBI126:
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 340              		.loc 3 350 7 is_stmt 1 view .LVU88
 341              	.LBB127:
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 342              		.loc 3 353 2 is_stmt 0 view .LVU89
 343 0034 08B1     		cbz	r0, .L14
 344              	.LVL17:
 345              	.LBB128:
 346              	.LBI128:
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 347              		.loc 6 491 7 is_stmt 1 view .LVU90
 348              	.LBB129:
 349              	.LBB130:
 350              	.LBI130:
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       template<typename _Tp1>
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus <= 201703L
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       pointer
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       { return std::__addressof(__x); }
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       const_pointer
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       { return std::__addressof(__x); }
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // about what the return value is when __n == 0.
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	if (__n > this->_M_max_size())
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_aligned_new
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  {
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 43


 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  }
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // __p is not permitted to be a null pointer.
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       void
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       deallocate(_Tp* __p, size_type __t)
 351              		.loc 5 120 7 view .LVU91
 352              	.LBB131:
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_aligned_new
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  {
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    ::operator delete(__p,
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** # if __cpp_sized_deallocation
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			      __t * sizeof(_Tp),
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** # endif
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    return;
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  }
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	::operator delete(__p
 353              		.loc 5 133 19 is_stmt 0 view .LVU92
 354 0036 FFF7FEFF 		bl	_ZdlPvj
 355              	.LVL18:
 356              	.L14:
 357              		.loc 5 133 19 view .LVU93
 358              	.LBE131:
 359              	.LBE130:
 360              	.LBE129:
 361              	.LBE128:
 362              	.LBE127:
 363              	.LBE126:
 364              	.LBB132:
 365              	.LBI132:
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 366              		.loc 3 128 14 is_stmt 1 view .LVU94
 367              	.LBB133:
 368              	.LBB134:
 369              	.LBI134:
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       _GLIBCXX20_CONSTEXPR
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       : __allocator_base<_Tp>(__a) { }
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // Avoid implicit deprecation.
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator& operator=(const allocator&) = default;
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Tp1>
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	_GLIBCXX20_CONSTEXPR
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 44


 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cpp_constexpr_dynamic_alloc
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       constexpr
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 370              		.loc 4 162 7 view .LVU95
 371              	.LBB135:
 372              	.LBI135:
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 373              		.loc 5 89 7 view .LVU96
 374              	.LEHB1:
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 375              		.loc 5 89 7 is_stmt 0 view .LVU97
 376 003a FFF7FEFF 		bl	__cxa_end_cleanup
 377              	.LVL19:
 378              	.LEHE1:
 379              	.LBE135:
 380              	.LBE134:
 381              	.LBE133:
 382              	.LBE132:
 383              	.LBE125:
 384              	.LBE124:
 385              	.LBE121:
 386              	.LBE120:
 387              		.cfi_endproc
 388              	.LFE1333:
 389              		.global	__gxx_personality_v0
 390              		.personality	__gxx_personality_v0
 391              		.handlerdata
 392              	.LLSDA1333:
 393 0008 FF       		.byte	0xff
 394 0009 FF       		.byte	0xff
 395 000a 01       		.byte	0x1
 396 000b 08       		.uleb128 .LLSDACSE1333-.LLSDACSB1333
 397              	.LLSDACSB1333:
 398 000c 0C       		.uleb128 .LEHB0-.LFB1333
 399 000d 20       		.uleb128 .LEHE0-.LEHB0
 400 000e 2E       		.uleb128 .L15-.LFB1333
 401 000f 00       		.uleb128 0
 402 0010 3A       		.uleb128 .LEHB1-.LFB1333
 403 0011 04       		.uleb128 .LEHE1-.LEHB1
 404 0012 00       		.uleb128 0
 405 0013 00       		.uleb128 0
 406              	.LLSDACSE1333:
 407              		.section	.text.main
 408              		.fnend
 410              		.text
 411              	.Letext0:
 412              		.file 7 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\machine\\_default_
 413              		.file 8 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 414              		.file 9 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 415              		.file 10 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\lib\\gcc\\arm-none-eabi\\10.2.1\\include\
 416              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 417              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 418              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 419              		.file 14 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\cstd
 420              		.file 15 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 421              		.file 16 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\cmat
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 45


 422              		.file 17 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\type
 423              		.file 18 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\arm-
 424              		.file 19 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 425              		.file 20 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\debu
 426              		.file 21 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 427              		.file 22 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 428              		.file 23 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 429              		.file 24 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 430              		.file 25 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\ext\
 431              		.file 26 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\stdlib.h"
 432              		.file 27 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\stdl
 433              		.file 28 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\math.h"
 434              		.file 29 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\math
 435              		.file 30 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\new"
 436              		.file 31 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 437              		.file 32 "Core/Inc/gpio.h"
 438              		.file 33 "Core/Inc/adc.h"
 439              		.file 34 "Core/Inc/tim.h"
 440              		.file 35 "<built-in>"
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s 			page 46


DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s:18     .text.Error_Handler:00000000 $t
C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s:26     .text.Error_Handler:00000000 Error_Handler
    .ARM.exidx.text.Error_Handler:00000000 $d
C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s:61     .text._Z18SystemClock_Configv:00000000 $t
C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s:68     .text._Z18SystemClock_Configv:00000000 _Z18SystemClock_Configv
C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s:199    .text._Z18SystemClock_Configv:00000080 $d
.ARM.exidx.text._Z18SystemClock_Configv:00000000 $d
C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s:206    .text.main:00000000 $t
C:\Users\saite\AppData\Local\Temp\ccvPRh0v.s:213    .text.main:00000000 main
             .ARM.extab.text.main:00000000 $d
             .ARM.exidx.text.main:00000000 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
__aeabi_unwind_cpp_pr0
HAL_Init
MX_GPIO_Init
MX_ADC1_Init
MX_TIM2_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM12_Init
_ZdlPvj
__cxa_end_cleanup
__gxx_personality_v0
