ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._Z6_writeiPci,"ax",%progbits
  18              		.align	1
  19              		.global	_Z6_writeiPci
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_Z6_writeiPci:
  27              		.fnstart
  28              	.LVL0:
  29              	.LFB1335:
  30              		.file 1 "Core/Src/main.cpp"
   1:Core/Src/main.cpp **** /* USER CODE BEGIN Header */
   2:Core/Src/main.cpp **** /**
   3:Core/Src/main.cpp ****   ******************************************************************************
   4:Core/Src/main.cpp ****   * @file           : main.c
   5:Core/Src/main.cpp ****   * @brief          : Main program body
   6:Core/Src/main.cpp ****   ******************************************************************************
   7:Core/Src/main.cpp ****   * @attention
   8:Core/Src/main.cpp ****   *
   9:Core/Src/main.cpp ****   * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
  10:Core/Src/main.cpp ****   * All rights reserved.</center></h2>
  11:Core/Src/main.cpp ****   *
  12:Core/Src/main.cpp ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Core/Src/main.cpp ****   * the "License"; You may not use this file except in compliance with the
  14:Core/Src/main.cpp ****   * License. You may obtain a copy of the License at:
  15:Core/Src/main.cpp ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Core/Src/main.cpp ****   *
  17:Core/Src/main.cpp ****   ******************************************************************************
  18:Core/Src/main.cpp ****   */
  19:Core/Src/main.cpp **** /* USER CODE END Header */
  20:Core/Src/main.cpp **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/main.cpp **** #include "main.h"
  22:Core/Src/main.cpp **** #include "adc.h"
  23:Core/Src/main.cpp **** #include "spi.h"
  24:Core/Src/main.cpp **** #include "tim.h"
  25:Core/Src/main.cpp **** #include "usart.h"
  26:Core/Src/main.cpp **** #include "gpio.h"
  27:Core/Src/main.cpp **** 
  28:Core/Src/main.cpp **** /* Private includes ----------------------------------------------------------*/
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 2


  29:Core/Src/main.cpp **** /* USER CODE BEGIN Includes */
  30:Core/Src/main.cpp **** #include "mine.h"
  31:Core/Src/main.cpp **** /* USER CODE END Includes */
  32:Core/Src/main.cpp **** 
  33:Core/Src/main.cpp **** /* Private typedef -----------------------------------------------------------*/
  34:Core/Src/main.cpp **** /* USER CODE BEGIN PTD */
  35:Core/Src/main.cpp **** 
  36:Core/Src/main.cpp **** /* USER CODE END PTD */
  37:Core/Src/main.cpp **** 
  38:Core/Src/main.cpp **** /* Private define ------------------------------------------------------------*/
  39:Core/Src/main.cpp **** /* USER CODE BEGIN PD */
  40:Core/Src/main.cpp **** /* USER CODE END PD */
  41:Core/Src/main.cpp **** 
  42:Core/Src/main.cpp **** /* Private macro -------------------------------------------------------------*/
  43:Core/Src/main.cpp **** /* USER CODE BEGIN PM */
  44:Core/Src/main.cpp **** 
  45:Core/Src/main.cpp **** /* USER CODE END PM */
  46:Core/Src/main.cpp **** 
  47:Core/Src/main.cpp **** /* Private variables ---------------------------------------------------------*/
  48:Core/Src/main.cpp **** 
  49:Core/Src/main.cpp **** /* USER CODE BEGIN PV */
  50:Core/Src/main.cpp **** 
  51:Core/Src/main.cpp **** /* USER CODE END PV */
  52:Core/Src/main.cpp **** 
  53:Core/Src/main.cpp **** /* Private function prototypes -----------------------------------------------*/
  54:Core/Src/main.cpp **** void SystemClock_Config(void);
  55:Core/Src/main.cpp **** /* USER CODE BEGIN PFP */
  56:Core/Src/main.cpp **** 
  57:Core/Src/main.cpp **** /* USER CODE END PFP */
  58:Core/Src/main.cpp **** 
  59:Core/Src/main.cpp **** /* Private user code ---------------------------------------------------------*/
  60:Core/Src/main.cpp **** /* USER CODE BEGIN 0 */
  61:Core/Src/main.cpp **** 
  62:Core/Src/main.cpp **** /* USER CODE END 0 */
  63:Core/Src/main.cpp **** 
  64:Core/Src/main.cpp **** /**
  65:Core/Src/main.cpp ****   * @brief  The application entry point.
  66:Core/Src/main.cpp ****   * @retval int
  67:Core/Src/main.cpp ****   */
  68:Core/Src/main.cpp **** int main(void)
  69:Core/Src/main.cpp **** {
  70:Core/Src/main.cpp ****   /* USER CODE BEGIN 1 */
  71:Core/Src/main.cpp ****   std::vector<int>v(0);
  72:Core/Src/main.cpp ****   /* USER CODE END 1 */
  73:Core/Src/main.cpp **** 
  74:Core/Src/main.cpp ****   /* MCU Configuration--------------------------------------------------------*/
  75:Core/Src/main.cpp **** 
  76:Core/Src/main.cpp ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  77:Core/Src/main.cpp ****   HAL_Init();
  78:Core/Src/main.cpp ****   /* USER CODE BEGIN Init */
  79:Core/Src/main.cpp **** 
  80:Core/Src/main.cpp ****   /* USER CODE END Init */
  81:Core/Src/main.cpp **** 
  82:Core/Src/main.cpp ****   /* Configure the system clock */
  83:Core/Src/main.cpp ****   SystemClock_Config();
  84:Core/Src/main.cpp **** 
  85:Core/Src/main.cpp ****   /* USER CODE BEGIN SysInit */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 3


  86:Core/Src/main.cpp **** 
  87:Core/Src/main.cpp ****   /* USER CODE END SysInit */
  88:Core/Src/main.cpp **** 
  89:Core/Src/main.cpp ****   /* Initialize all configured peripherals */
  90:Core/Src/main.cpp ****   MX_GPIO_Init();
  91:Core/Src/main.cpp ****   MX_ADC1_Init();
  92:Core/Src/main.cpp ****   MX_TIM2_Init();
  93:Core/Src/main.cpp ****   MX_TIM4_Init();
  94:Core/Src/main.cpp ****   MX_TIM9_Init();
  95:Core/Src/main.cpp ****   MX_TIM12_Init();
  96:Core/Src/main.cpp ****   MX_UART4_Init();
  97:Core/Src/main.cpp ****   MX_SPI1_Init();
  98:Core/Src/main.cpp ****   MX_TIM6_Init();
  99:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 100:Core/Src/main.cpp ****   v.push_back(1);
 101:Core/Src/main.cpp ****   /* USER CODE END 2 */
 102:Core/Src/main.cpp **** 
 103:Core/Src/main.cpp ****   /* Infinite loop */
 104:Core/Src/main.cpp ****   /* USER CODE BEGIN WHILE */
 105:Core/Src/main.cpp ****   while (1)
 106:Core/Src/main.cpp ****   {
 107:Core/Src/main.cpp ****     /* USER CODE END WHILE */
 108:Core/Src/main.cpp ****     
 109:Core/Src/main.cpp ****     /* USER CODE BEGIN 3 */
 110:Core/Src/main.cpp ****   }
 111:Core/Src/main.cpp ****   /* USER CODE END 3 */
 112:Core/Src/main.cpp **** }
 113:Core/Src/main.cpp **** 
 114:Core/Src/main.cpp **** /**
 115:Core/Src/main.cpp ****   * @brief System Clock Configuration
 116:Core/Src/main.cpp ****   * @retval None
 117:Core/Src/main.cpp ****   */
 118:Core/Src/main.cpp **** void SystemClock_Config(void)
 119:Core/Src/main.cpp **** {
 120:Core/Src/main.cpp ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 121:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 122:Core/Src/main.cpp **** 
 123:Core/Src/main.cpp ****   /** Configure the main internal regulator output voltage
 124:Core/Src/main.cpp ****   */
 125:Core/Src/main.cpp ****   __HAL_RCC_PWR_CLK_ENABLE();
 126:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 127:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 128:Core/Src/main.cpp ****   * in the RCC_OscInitTypeDef structure.
 129:Core/Src/main.cpp ****   */
 130:Core/Src/main.cpp ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 131:Core/Src/main.cpp ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 132:Core/Src/main.cpp ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 133:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 134:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 135:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLM = 8;
 136:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLN = 168;
 137:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 138:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 139:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 140:Core/Src/main.cpp ****   {
 141:Core/Src/main.cpp ****     Error_Handler();
 142:Core/Src/main.cpp ****   }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 4


 143:Core/Src/main.cpp ****   /** Initializes the CPU, AHB and APB buses clocks
 144:Core/Src/main.cpp ****   */
 145:Core/Src/main.cpp ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 146:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 147:Core/Src/main.cpp ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 148:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 149:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 150:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 151:Core/Src/main.cpp **** 
 152:Core/Src/main.cpp ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 153:Core/Src/main.cpp ****   {
 154:Core/Src/main.cpp ****     Error_Handler();
 155:Core/Src/main.cpp ****   }
 156:Core/Src/main.cpp **** }
 157:Core/Src/main.cpp **** 
 158:Core/Src/main.cpp **** /* USER CODE BEGIN 4 */
 159:Core/Src/main.cpp **** int _write(int file, char *ptr, int len)
 160:Core/Src/main.cpp **** {
  31              		.loc 1 160 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 160 1 is_stmt 0 view .LVU1
  36 0000 10B5     		push	{r4, lr}
  37              		.save {r4, lr}
  38              	.LCFI0:
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 4, -8
  41              		.cfi_offset 14, -4
  42 0002 1446     		mov	r4, r2
 161:Core/Src/main.cpp ****   HAL_UART_Transmit(&huart4, (uint8_t *)ptr, len, 10);
  43              		.loc 1 161 3 is_stmt 1 view .LVU2
  44              		.loc 1 161 20 is_stmt 0 view .LVU3
  45 0004 0A23     		movs	r3, #10
  46 0006 92B2     		uxth	r2, r2
  47              	.LVL1:
  48              		.loc 1 161 20 view .LVU4
  49 0008 0248     		ldr	r0, .L3
  50              	.LVL2:
  51              		.loc 1 161 20 view .LVU5
  52 000a FFF7FEFF 		bl	HAL_UART_Transmit
  53              	.LVL3:
 162:Core/Src/main.cpp ****   return len;
  54              		.loc 1 162 3 is_stmt 1 view .LVU6
 163:Core/Src/main.cpp **** }
  55              		.loc 1 163 1 is_stmt 0 view .LVU7
  56 000e 2046     		mov	r0, r4
  57 0010 10BD     		pop	{r4, pc}
  58              	.LVL4:
  59              	.L4:
  60              		.loc 1 163 1 view .LVU8
  61 0012 00BF     		.align	2
  62              	.L3:
  63 0014 00000000 		.word	huart4
  64              		.cfi_endproc
  65              	.LFE1335:
  66              		.fnend
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 5


  68              		.section	.text.Error_Handler,"ax",%progbits
  69              		.align	1
  70              		.global	Error_Handler
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu fpv4-sp-d16
  76              	Error_Handler:
  77              		.fnstart
  78              	.LFB1336:
 164:Core/Src/main.cpp **** /* USER CODE END 4 */
 165:Core/Src/main.cpp **** 
 166:Core/Src/main.cpp **** /**
 167:Core/Src/main.cpp ****   * @brief  This function is executed in case of error occurrence.
 168:Core/Src/main.cpp ****   * @retval None
 169:Core/Src/main.cpp ****   */
 170:Core/Src/main.cpp **** void Error_Handler(void)
 171:Core/Src/main.cpp **** {
  79              		.loc 1 171 1 is_stmt 1 view -0
  80              		.cfi_startproc
  81              		@ Volatile: function does not return.
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
 172:Core/Src/main.cpp ****   /* USER CODE BEGIN Error_Handler_Debug */
 173:Core/Src/main.cpp ****   /* User can add his own implementation to report the HAL error return state */
 174:Core/Src/main.cpp ****   __disable_irq();
  85              		.loc 1 174 3 view .LVU10
  86              	.LBB276:
  87              	.LBI276:
  88              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 6


  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 7


  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 8


  89              		.loc 2 140 27 view .LVU11
  90              	.LBB277:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
  91              		.loc 2 142 3 view .LVU12
  92              		.syntax unified
  93              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
  94 0000 72B6     		cpsid i
  95              	@ 0 "" 2
  96              		.thumb
  97              		.syntax unified
  98              	.L6:
  99              	.LBE277:
 100              	.LBE276:
 175:Core/Src/main.cpp ****   while (1)
 101              		.loc 1 175 3 discriminator 1 view .LVU13
 102              		.loc 1 175 3 discriminator 1 view .LVU14
 103 0002 FEE7     		b	.L6
 104              		.cfi_endproc
 105              	.LFE1336:
 106              		.cantunwind
 107              		.fnend
 109              		.section	.text._Z18SystemClock_Configv,"ax",%progbits
 110              		.align	1
 111              		.global	_Z18SystemClock_Configv
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu fpv4-sp-d16
 117              	_Z18SystemClock_Configv:
 118              		.fnstart
 119              	.LFB1334:
 119:Core/Src/main.cpp ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 120              		.loc 1 119 1 view -0
 121              		.cfi_startproc
 122              		@ args = 0, pretend = 0, frame = 80
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124 0000 00B5     		push	{lr}
 125              		.save {lr}
 126              	.LCFI1:
 127              		.cfi_def_cfa_offset 4
 128              		.cfi_offset 14, -4
 129              		.pad #84
 130 0002 95B0     		sub	sp, sp, #84
 131              	.LCFI2:
 132              		.cfi_def_cfa_offset 88
 120:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 133              		.loc 1 120 3 view .LVU16
 120:Core/Src/main.cpp ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 134              		.loc 1 120 22 is_stmt 0 view .LVU17
 135 0004 3022     		movs	r2, #48
 136 0006 0021     		movs	r1, #0
 137 0008 08A8     		add	r0, sp, #32
 138 000a FFF7FEFF 		bl	memset
 139              	.LVL5:
 121:Core/Src/main.cpp **** 
 140              		.loc 1 121 3 is_stmt 1 view .LVU18
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 9


 121:Core/Src/main.cpp **** 
 141              		.loc 1 121 22 is_stmt 0 view .LVU19
 142 000e 0023     		movs	r3, #0
 143 0010 0393     		str	r3, [sp, #12]
 144 0012 0493     		str	r3, [sp, #16]
 145 0014 0593     		str	r3, [sp, #20]
 146 0016 0693     		str	r3, [sp, #24]
 147 0018 0793     		str	r3, [sp, #28]
 125:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 148              		.loc 1 125 3 is_stmt 1 view .LVU20
 149              	.LBB278:
 125:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 150              		.loc 1 125 3 view .LVU21
 151 001a 0193     		str	r3, [sp, #4]
 125:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 152              		.loc 1 125 3 view .LVU22
 153 001c 1F4A     		ldr	r2, .L13
 154 001e 116C     		ldr	r1, [r2, #64]
 155 0020 41F08051 		orr	r1, r1, #268435456
 156 0024 1164     		str	r1, [r2, #64]
 125:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 157              		.loc 1 125 3 view .LVU23
 158 0026 126C     		ldr	r2, [r2, #64]
 159 0028 02F08052 		and	r2, r2, #268435456
 160 002c 0192     		str	r2, [sp, #4]
 125:Core/Src/main.cpp ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 161              		.loc 1 125 3 view .LVU24
 162 002e 019A     		ldr	r2, [sp, #4]
 163              	.LBE278:
 126:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 164              		.loc 1 126 3 view .LVU25
 165              	.LBB279:
 126:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 166              		.loc 1 126 3 view .LVU26
 167 0030 0293     		str	r3, [sp, #8]
 126:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 168              		.loc 1 126 3 view .LVU27
 169 0032 1B4A     		ldr	r2, .L13+4
 170 0034 1168     		ldr	r1, [r2]
 171 0036 41F48041 		orr	r1, r1, #16384
 172 003a 1160     		str	r1, [r2]
 126:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 173              		.loc 1 126 3 view .LVU28
 174 003c 1268     		ldr	r2, [r2]
 175 003e 02F48042 		and	r2, r2, #16384
 176 0042 0292     		str	r2, [sp, #8]
 126:Core/Src/main.cpp ****   /** Initializes the RCC Oscillators according to the specified parameters
 177              		.loc 1 126 3 view .LVU29
 178 0044 029A     		ldr	r2, [sp, #8]
 179              	.LBE279:
 130:Core/Src/main.cpp ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 180              		.loc 1 130 3 view .LVU30
 130:Core/Src/main.cpp ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 181              		.loc 1 130 36 is_stmt 0 view .LVU31
 182 0046 0222     		movs	r2, #2
 183 0048 0892     		str	r2, [sp, #32]
 131:Core/Src/main.cpp ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 10


 184              		.loc 1 131 3 is_stmt 1 view .LVU32
 131:Core/Src/main.cpp ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 185              		.loc 1 131 30 is_stmt 0 view .LVU33
 186 004a 0121     		movs	r1, #1
 187 004c 0B91     		str	r1, [sp, #44]
 132:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 188              		.loc 1 132 3 is_stmt 1 view .LVU34
 132:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 189              		.loc 1 132 41 is_stmt 0 view .LVU35
 190 004e 1021     		movs	r1, #16
 191 0050 0C91     		str	r1, [sp, #48]
 133:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 192              		.loc 1 133 3 is_stmt 1 view .LVU36
 133:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 193              		.loc 1 133 34 is_stmt 0 view .LVU37
 194 0052 0E92     		str	r2, [sp, #56]
 134:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLM = 8;
 195              		.loc 1 134 3 is_stmt 1 view .LVU38
 134:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLM = 8;
 196              		.loc 1 134 35 is_stmt 0 view .LVU39
 197 0054 0F93     		str	r3, [sp, #60]
 135:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLN = 168;
 198              		.loc 1 135 3 is_stmt 1 view .LVU40
 135:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLN = 168;
 199              		.loc 1 135 30 is_stmt 0 view .LVU41
 200 0056 0823     		movs	r3, #8
 201 0058 1093     		str	r3, [sp, #64]
 136:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 202              		.loc 1 136 3 is_stmt 1 view .LVU42
 136:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 203              		.loc 1 136 30 is_stmt 0 view .LVU43
 204 005a A823     		movs	r3, #168
 205 005c 1193     		str	r3, [sp, #68]
 137:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 206              		.loc 1 137 3 is_stmt 1 view .LVU44
 137:Core/Src/main.cpp ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 207              		.loc 1 137 30 is_stmt 0 view .LVU45
 208 005e 1292     		str	r2, [sp, #72]
 138:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 209              		.loc 1 138 3 is_stmt 1 view .LVU46
 138:Core/Src/main.cpp ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 210              		.loc 1 138 30 is_stmt 0 view .LVU47
 211 0060 0423     		movs	r3, #4
 212 0062 1393     		str	r3, [sp, #76]
 139:Core/Src/main.cpp ****   {
 213              		.loc 1 139 3 is_stmt 1 view .LVU48
 139:Core/Src/main.cpp ****   {
 214              		.loc 1 139 24 is_stmt 0 view .LVU49
 215 0064 08A8     		add	r0, sp, #32
 216 0066 FFF7FEFF 		bl	HAL_RCC_OscConfig
 217              	.LVL6:
 139:Core/Src/main.cpp ****   {
 218              		.loc 1 139 3 view .LVU50
 219 006a 98B9     		cbnz	r0, .L11
 145:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 220              		.loc 1 145 3 is_stmt 1 view .LVU51
 145:Core/Src/main.cpp ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 11


 221              		.loc 1 145 31 is_stmt 0 view .LVU52
 222 006c 0F23     		movs	r3, #15
 223 006e 0393     		str	r3, [sp, #12]
 147:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 224              		.loc 1 147 3 is_stmt 1 view .LVU53
 147:Core/Src/main.cpp ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 225              		.loc 1 147 34 is_stmt 0 view .LVU54
 226 0070 0223     		movs	r3, #2
 227 0072 0493     		str	r3, [sp, #16]
 148:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 228              		.loc 1 148 3 is_stmt 1 view .LVU55
 148:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 229              		.loc 1 148 35 is_stmt 0 view .LVU56
 230 0074 0023     		movs	r3, #0
 231 0076 0593     		str	r3, [sp, #20]
 149:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 232              		.loc 1 149 3 is_stmt 1 view .LVU57
 149:Core/Src/main.cpp ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 233              		.loc 1 149 36 is_stmt 0 view .LVU58
 234 0078 4FF4A053 		mov	r3, #5120
 235 007c 0693     		str	r3, [sp, #24]
 150:Core/Src/main.cpp **** 
 236              		.loc 1 150 3 is_stmt 1 view .LVU59
 150:Core/Src/main.cpp **** 
 237              		.loc 1 150 36 is_stmt 0 view .LVU60
 238 007e 4FF48053 		mov	r3, #4096
 239 0082 0793     		str	r3, [sp, #28]
 152:Core/Src/main.cpp ****   {
 240              		.loc 1 152 3 is_stmt 1 view .LVU61
 152:Core/Src/main.cpp ****   {
 241              		.loc 1 152 26 is_stmt 0 view .LVU62
 242 0084 0521     		movs	r1, #5
 243 0086 03A8     		add	r0, sp, #12
 244 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 245              	.LVL7:
 152:Core/Src/main.cpp ****   {
 246              		.loc 1 152 3 view .LVU63
 247 008c 20B9     		cbnz	r0, .L12
 156:Core/Src/main.cpp **** 
 248              		.loc 1 156 1 view .LVU64
 249 008e 15B0     		add	sp, sp, #84
 250              	.LCFI3:
 251              		.cfi_remember_state
 252              		.cfi_def_cfa_offset 4
 253              		@ sp needed
 254 0090 5DF804FB 		ldr	pc, [sp], #4
 255              	.L11:
 256              	.LCFI4:
 257              		.cfi_restore_state
 141:Core/Src/main.cpp ****   }
 258              		.loc 1 141 5 is_stmt 1 view .LVU65
 141:Core/Src/main.cpp ****   }
 259              		.loc 1 141 18 is_stmt 0 view .LVU66
 260 0094 FFF7FEFF 		bl	Error_Handler
 261              	.LVL8:
 262              	.L12:
 154:Core/Src/main.cpp ****   }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 12


 263              		.loc 1 154 5 is_stmt 1 view .LVU67
 154:Core/Src/main.cpp ****   }
 264              		.loc 1 154 18 is_stmt 0 view .LVU68
 265 0098 FFF7FEFF 		bl	Error_Handler
 266              	.LVL9:
 267              	.L14:
 268              		.align	2
 269              	.L13:
 270 009c 00380240 		.word	1073887232
 271 00a0 00700040 		.word	1073770496
 272              		.cfi_endproc
 273              	.LFE1334:
 274              		.fnend
 276              		.section	.rodata._ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1
 277              		.align	2
 278              	.LC0:
 279 0000 76656374 		.ascii	"vector::_M_realloc_insert\000"
 279      6F723A3A 
 279      5F4D5F72 
 279      65616C6C 
 279      6F635F69 
 280              		.section	.text._ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_E
 281              		.align	1
 282              		.weak	_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_
 283              		.syntax unified
 284              		.thumb
 285              		.thumb_func
 286              		.fpu fpv4-sp-d16
 288              	_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_:
 289              		.fnstart
 290              	.LVL10:
 291              	.LFB1390:
 292              		.file 3 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 13


  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** /*
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Copyright (c) 1994
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Hewlett-Packard Company
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * representations about the suitability of this software for any
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Copyright (c) 1996
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * representations about the suitability of this  software for any
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  */
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** /** @file bits/vector.tcc
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****  */
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #ifndef _VECTOR_TCC
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #define _VECTOR_TCC 1
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** {
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     void
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     reserve(size_type __n)
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (__n > this->max_size())
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (this->capacity() < __n)
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  const size_type __old_size = size();
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  pointer __tmp;
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __tmp = this->_M_allocate(__n);
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  __tmp, _M_get_Tp_allocator());
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 14


  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __tmp = _M_allocate_and_copy(__n,
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    _M_get_Tp_allocator());
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			this->_M_impl._M_end_of_storage
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			- this->_M_impl._M_start);
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename... _Args>
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       typename vector<_Tp, _Alloc>::reference
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       emplace_back(_Args&&... __args)
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       {
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				     std::forward<_Args>(__args)...);
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	return back();
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       }
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     insert(iterator __position, const value_type& __x)
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       const size_type __n = __position - begin();
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 15


 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (__position == end())
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				     __x);
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    const auto __pos = begin() + (__position - cbegin());
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    // __x could be an existing element of this vector, so make a
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    // copy of it before _M_insert_aux moves elements around.
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Temporary_value __x_copy(this, __x);
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _M_insert_aux(__position, __x);
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       else
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_M_realloc_insert(__position, __x);
 164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_erase(iterator __position)
 173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (__position + 1 != end())
 175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       --this->_M_impl._M_finish;
 177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return __position;
 180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_erase(iterator __first, iterator __last)
 186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (__first != __last)
 188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (__last != end())
 190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return __first;
 194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 16


 196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>&
 198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (&__x != this)
 202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
 204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 206:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 207:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 208:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 209:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	        {
 210:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  // replacement allocator cannot free existing storage
 211:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  this->clear();
 212:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 213:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				this->_M_impl._M_end_of_storage
 214:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				- this->_M_impl._M_start);
 215:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 216:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 217:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 218:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		}
 219:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 220:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   __x._M_get_Tp_allocator());
 221:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 222:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 223:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  const size_type __xlen = __x.size();
 224:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (__xlen > capacity())
 225:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 226:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 227:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 						   __x.end());
 228:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 229:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    _M_get_Tp_allocator());
 230:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 231:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    this->_M_impl._M_end_of_storage
 232:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    - this->_M_impl._M_start);
 233:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 234:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 235:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 236:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else if (size() >= __xlen)
 237:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 238:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 239:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			    end(), _M_get_Tp_allocator());
 240:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 241:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
 242:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 243:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 244:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			this->_M_impl._M_start);
 245:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 246:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  __x._M_impl._M_finish,
 247:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  this->_M_impl._M_finish,
 248:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  _M_get_Tp_allocator());
 249:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 250:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 251:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 252:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return *this;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 17


 253:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 254:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 255:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 256:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     void
 257:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 258:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 259:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (__n > capacity())
 261:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 262:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 263:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 264:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 265:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       else if (__n > size())
 266:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 267:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  std::fill(begin(), end(), __val);
 268:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  const size_type __add = __n - size();
 269:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);
 270:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  this->_M_impl._M_finish =
 271:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 272:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  __add, __val, _M_get_Tp_allocator());
 273:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);
 274:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 275:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       else
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 277:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 278:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 279:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 280:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename _InputIterator>
 281:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 282:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 283:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 284:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		    std::input_iterator_tag)
 285:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       {
 286:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 287:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	     ++__cur, (void)++__first)
 289:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  *__cur = *__first;
 290:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (__first == __last)
 291:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_erase_at_end(__cur);
 292:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 293:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_range_insert(end(), __first, __last,
 294:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  std::__iterator_category(__first));
 295:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       }
 296:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 297:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 298:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename _ForwardIterator>
 299:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 300:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 301:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 302:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		    std::forward_iterator_tag)
 303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       {
 304:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 305:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 306:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (__len > capacity())
 307:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 308:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _S_check_init_len(__len, _M_get_Tp_allocator());
 309:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 18


 310:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 311:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  _M_get_Tp_allocator());
 312:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
 313:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 314:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  this->_M_impl._M_end_of_storage
 315:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			  - this->_M_impl._M_start);
 316:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 317:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 318:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 319:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 320:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else if (size() >= __len)
 321:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 322:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 323:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 324:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _ForwardIterator __mid = __first;
 325:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::advance(__mid, size());
 326:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 327:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    const size_type __attribute__((__unused__)) __n = __len - size();
 328:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 329:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    this->_M_impl._M_finish =
 330:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 331:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  this->_M_impl._M_finish,
 332:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					  _M_get_Tp_allocator());
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
 334:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       }
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 337:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 338:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 339:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     auto
 340:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 341:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
 342:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       const auto __n = __position - cbegin();
 344:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 345:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (__position == cend())
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 347:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 348:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 349:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				     std::move(__v));
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 351:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 352:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  }
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 354:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_insert_aux(begin() + __n, std::move(__v));
 355:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       else
 356:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_M_realloc_insert(begin() + __n, std::move(__v));
 357:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 358:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 360:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 361:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 362:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename... _Args>
 363:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       auto
 364:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 365:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_emplace_aux(const_iterator __position, _Args&&... __args)
 366:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       -> iterator
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 19


 367:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       {
 368:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	const auto __n = __position - cbegin();
 369:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 370:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (__position == cend())
 371:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 372:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 373:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 374:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				       std::forward<_Args>(__args)...);
 375:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      ++this->_M_impl._M_finish;
 376:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 377:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 378:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
 379:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 380:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      // We need to construct a temporary because something in __args...
 381:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      // could alias one of the elements of the container and so we
 382:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      // need to use it before _M_insert_aux moves elements around.
 383:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
 384:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
 385:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 386:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	else
 387:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
 388:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 389:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 390:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       }
 391:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 392:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 393:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename _Arg>
 394:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 395:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 396:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_insert_aux(iterator __position, _Arg&& __arg)
 397:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 398:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 399:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     void
 400:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 401:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 402:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 403:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 404:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 405:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 406:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 407:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       ++this->_M_impl._M_finish;
 408:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 409:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus < 201103L
 410:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _Tp __x_copy = __x;
 411:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 412:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 413:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			      this->_M_impl._M_finish - 2,
 414:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 			      this->_M_impl._M_finish - 1);
 415:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus < 201103L
 416:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       *__position = __x_copy;
 417:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 418:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       *__position = std::forward<_Arg>(__arg);
 419:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 420:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 421:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 422:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 423:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 20


 424:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     template<typename... _Args>
 425:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       void
 426:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       vector<_Tp, _Alloc>::
 293              		.loc 3 426 7 is_stmt 1 view -0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 8
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297              		.loc 3 426 7 is_stmt 0 view .LVU70
 298 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 299              		.save {r4, r5, r6, r7, r8, r9, r10, fp, lr}
 300              	.LCFI5:
 301              		.cfi_def_cfa_offset 36
 302              		.cfi_offset 4, -36
 303              		.cfi_offset 5, -32
 304              		.cfi_offset 6, -28
 305              		.cfi_offset 7, -24
 306              		.cfi_offset 8, -20
 307              		.cfi_offset 9, -16
 308              		.cfi_offset 10, -12
 309              		.cfi_offset 11, -8
 310              		.cfi_offset 14, -4
 311              		.pad #12
 312 0004 83B0     		sub	sp, sp, #12
 313              	.LCFI6:
 314              		.cfi_def_cfa_offset 48
 315 0006 8846     		mov	r8, r1
 316              	.LVL11:
 317              		.loc 3 426 7 view .LVU71
 318 0008 1646     		mov	r6, r2
 319              	.LVL12:
 320              		.loc 3 426 7 view .LVU72
 321 000a 0123     		movs	r3, #1
 322 000c 0093     		str	r3, [sp]
 323              	.LVL13:
 324              	.LBB324:
 325              	.LBI324:
 326              		.file 4 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Vector implementation -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // You should have received a copy of the GNU General Public License and
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 21


  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** /*
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Copyright (c) 1994
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Hewlett-Packard Company
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * representations about the suitability of this software for any
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Copyright (c) 1996
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * representations about the suitability of this  software for any
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  */
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** /** @file bits/stl_vector.h
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****  */
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #ifndef _STL_VECTOR_H
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _STL_VECTOR_H 1
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <bits/functexcept.h>
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <bits/concept_check.h>
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <initializer_list>
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus > 201703L
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # include <compare>
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #include <debug/assertions.h>
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** extern "C" void
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  const void*, const void*);
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 22


  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** {
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc>
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     struct _Vector_base
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     {
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        	pointer;
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       struct _Vector_impl_data
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer _M_start;
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer _M_finish;
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer _M_end_of_storage;
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_start = __x._M_start;
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_finish = __x._M_finish;
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // information used by TBAA.
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Vector_impl_data __tmp;
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __tmp._M_copy_data(*this);
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_copy_data(__x);
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __x._M_copy_data(__tmp);
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       };
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       struct _Vector_impl
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type()
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 23


 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(__a)
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	template<typename = _Tp_alloc_type>
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  struct _Asan
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ::size_type size_type;
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    struct _Grow
 169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      void _M_grew(size_type) { }
 172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    };
 173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  };
 174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	template<typename _Up>
 177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ::size_type size_type;
 181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
 190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 24


 192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    static void
 200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      if (__impl._M_start)
 203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
 205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 206:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 207:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    struct _Reinit
 208:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 209:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 210:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      {
 211:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 212:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		_S_on_dealloc(_M_impl);
 213:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      }
 214:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 215:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ~_Reinit()
 216:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      {
 217:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 218:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		if (_M_impl._M_start)
 219:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 220:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    _M_impl._M_finish);
 221:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      }
 222:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 223:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 224:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 225:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 226:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 227:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 228:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 229:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    };
 230:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 231:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 232:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    struct _Grow
 233:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
 234:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 235:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 236:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 237:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 238:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 239:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 240:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 241:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 242:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 243:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 244:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 245:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 246:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    private:
 247:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 248:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      size_type _M_n;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 25


 249:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    };
 250:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  };
 251:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 252:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 253:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 254:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 255:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 256:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 257:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 258:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 259:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 261:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 262:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 263:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 264:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 265:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 266:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 267:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 268:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 269:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 270:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       };
 271:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 272:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 273:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Alloc allocator_type;
 274:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 275:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Tp_alloc_type&
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 277:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 278:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 279:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const _Tp_alloc_type&
 280:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 281:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 282:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 283:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       allocator_type
 284:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 285:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 286:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 287:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base() = default;
 289:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 290:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base() { }
 291:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 292:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 293:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 294:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a) { }
 295:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 296:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Kept for ABI compatibility.
 297:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 298:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(size_t __n)
 299:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl()
 300:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_create_storage(__n); }
 301:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 302:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 304:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a)
 305:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_create_storage(__n); }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 26


 306:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 307:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 308:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 309:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 310:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Kept for ABI compatibility.
 311:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 312:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 313:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(std::move(__a)) { }
 314:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 315:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 316:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a)
 317:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 318:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__x.get_allocator() == __a)
 319:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 320:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else
 321:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 322:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 323:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _M_create_storage(__n);
 324:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
 325:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 326:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # endif
 327:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 328:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 329:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 330:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { }
 331:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 332:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 334:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 337:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 338:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 339:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 340:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Vector_impl _M_impl;
 341:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 342:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       pointer
 343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_allocate(size_t __n)
 344:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 345:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 347:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 348:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 349:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 351:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 352:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__p)
 354:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 355:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 356:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 357:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
 358:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_create_storage(size_t __n)
 360:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 361:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 362:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 27


 363:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 364:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 365:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     };
 366:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 367:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   /**
 368:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 369:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  individual elements in any order.
 370:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 371:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @ingroup sequences
 372:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 373:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @tparam _Tp  Type of element.
 374:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 375:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 376:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 377:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 378:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 379:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 380:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 381:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *
 382:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 383:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 384:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  elements in any order and saves the user from worrying about
 385:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 386:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****    *  also provided as with C-style arrays.
 387:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   */
 388:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 389:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 390:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     {
 391:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 392:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Concept requirements.
 393:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 394:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # if __cplusplus < 201103L
 395:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 396:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # endif
 397:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 398:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 399:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 400:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 401:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 402:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 403:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 404:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 405:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 406:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** # endif
 407:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 408:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 409:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 410:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 411:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 412:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 413:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 414:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Tp					value_type;
 415:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Base::pointer			pointer;
 416:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 417:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 418:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 419:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 28


 420:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 421:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator;
 422:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 423:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 424:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef size_t					size_type;
 425:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef ptrdiff_t					difference_type;
 426:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       typedef _Alloc					allocator_type;
 427:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 428:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     private:
 429:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 430:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static constexpr bool
 431:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_nothrow_relocate(true_type)
 432:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 433:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 434:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  std::declval<pointer>(),
 435:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  std::declval<pointer>(),
 436:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 437:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 438:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 439:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static constexpr bool
 440:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_nothrow_relocate(false_type)
 441:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return false; }
 442:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 443:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static constexpr bool
 444:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_use_relocate()
 445:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 446:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 447:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 448:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 449:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 450:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 451:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 452:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static pointer
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 454:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 455:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 456:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 457:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 458:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 459:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static pointer
 460:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 461:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 462:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return __result; }
 463:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 464:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static pointer
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 466:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 467:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 468:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 469:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 470:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 471:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif // C++11
 472:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 473:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
 474:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_allocate;
 475:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_deallocate;
 476:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_impl;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 29


 477:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 478:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 479:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 480:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 481:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 482:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 483:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 484:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 485:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 486:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 487:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector() = default;
 488:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 489:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector() { }
 490:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 492:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 493:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 494:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator object.
 495:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 496:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       explicit
 497:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 498:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__a) { }
 499:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 500:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 501:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 502:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 503:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 504:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 505:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 506:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 507:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  constructed elements.
 508:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 509:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       explicit
 510:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 511:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 512:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_default_initialize(__n); }
 513:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 514:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 515:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 516:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 517:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 518:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 519:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 520:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 521:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 522:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value,
 523:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 524:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 525:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 526:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 527:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 528:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 529:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 530:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __value  An element to copy.
 531:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 532:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 533:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 30


 534:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 535:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       explicit
 536:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 537:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 538:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 539:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 540:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 541:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 542:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 543:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector copy constructor.
 544:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 545:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 546:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 547:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @a __x  will not be copied
 548:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 549:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 550:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 551:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 552:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 553:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(const vector& __x)
 554:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__x.size(),
 555:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 556:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 557:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
 558:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 559:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 560:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 561:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 562:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 563:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 564:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 565:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector move constructor.
 566:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 567:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 568:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  moved instance.
 569:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 570:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector.
 571:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 572:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&&) noexcept = default;
 573:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 574:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Copy constructor with alternative allocator
 575:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 576:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__x.size(), __a)
 577:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 578:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
 579:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 580:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      this->_M_impl._M_start,
 581:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 582:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 583:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 584:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     private:
 585:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 586:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__m, std::move(__rv))
 587:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { }
 588:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 589:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 590:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__m)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 31


 591:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 592:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__rv.get_allocator() == __m)
 593:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 594:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else if (!__rv.empty())
 595:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
 596:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 597:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    this->_M_impl._M_finish =
 598:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 599:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  this->_M_impl._M_start,
 600:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  _M_get_Tp_allocator());
 601:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    __rv.clear();
 602:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
 603:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 604:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 605:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
 606:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Move constructor with alternative allocator
 607:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 608:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       noexcept( noexcept(
 609:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 610:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 611:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 612:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { }
 613:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 614:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 615:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 616:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 617:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 618:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 619:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 620:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  initializer_list @a __l.
 621:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 622:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This will call the element type's copy constructor N times
 623:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 624:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 625:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector(initializer_list<value_type> __l,
 626:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 627:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(__a)
 628:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 629:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 630:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 631:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 632:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 633:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 634:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 635:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Builds a %vector from a range.
 636:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
 637:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last  An input iterator.
 638:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __a  An allocator.
 639:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 640:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 641:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  [first,last).
 642:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 643:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 644:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  random-access, then this will call the elements' copy
 645:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 646:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 647:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 32


 648:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  constructor, and logN memory reallocations.
 649:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 650:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 651:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
 652:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 653:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 654:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 655:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Base(__a)
 656:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 657:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_range_initialize(__first, __last,
 658:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			      std::__iterator_category(__first));
 659:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 660:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 661:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
 662:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 663:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 664:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Base(__a)
 665:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 666:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 667:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 668:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 669:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 670:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 671:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 672:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 673:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 674:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 675:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 676:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  responsibility.
 677:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 678:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 679:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 680:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 681:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      _M_get_Tp_allocator());
 682:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 683:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 684:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 685:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 686:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector assignment operator.
 687:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 688:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 689:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 690:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @a __x will not be copied.
 691:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 692:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 693:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 694:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector&
 695:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator=(const vector& __x);
 696:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 697:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 698:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 699:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector move assignment operator.
 700:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 701:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 702:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 703:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  if the allocators permit it).
 704:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 33


 705:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 706:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 707:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 708:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector&
 709:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 710:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 711:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	constexpr bool __move_storage =
 712:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 713:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 714:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 715:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *this;
 716:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 717:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 718:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 719:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  %Vector list assignment operator.
 720:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 721:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 722:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 723:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  initializer list @a __l.
 724:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 725:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 726:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 727:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  of elements assigned.
 728:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 729:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       vector&
 730:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator=(initializer_list<value_type> __l)
 731:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 732:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 733:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 734:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *this;
 735:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 736:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 737:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 738:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 739:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 740:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 741:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __val  Value to be assigned.
 742:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 743:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 744:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  value.  Note that the assignment completely changes the
 745:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 746:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the number of elements assigned.
 747:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 748:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 749:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       assign(size_type __n, const value_type& __val)
 750:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_assign(__n, __val); }
 751:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 752:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 753:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 754:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
 755:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last   An input iterator.
 756:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 757:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 758:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  range [__first,__last).
 759:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 760:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 761:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 34


 762:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  of elements assigned.
 763:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 764:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 765:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
 766:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 767:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 768:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 769:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 770:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 771:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
 772:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
 773:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 774:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
 775:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 776:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 777:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 778:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
 779:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 780:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 781:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 782:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 783:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 784:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 785:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 786:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 787:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  initializer list @a __l.
 788:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 789:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 790:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 791:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  of elements assigned.
 792:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 793:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 794:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       assign(initializer_list<value_type> __l)
 795:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 796:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 797:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    random_access_iterator_tag());
 798:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 799:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 800:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 801:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Get a copy of the memory allocation object.
 802:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       using _Base::get_allocator;
 803:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 804:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // iterators
 805:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 806:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write iterator that points to the first
 807:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 808:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 809:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 810:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
 811:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 812:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 813:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 814:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 815:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 816:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 817:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 818:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 35


 819:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator
 820:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 821:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 822:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 823:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 824:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 825:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 826:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 827:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 828:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
 829:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 830:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 831:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 832:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 833:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 834:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 835:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  ordinary element order.
 836:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 837:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator
 838:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 839:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 840:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 841:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 842:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 843:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 844:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 845:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 846:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reverse_iterator
 847:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 848:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return reverse_iterator(end()); }
 849:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 850:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 851:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 852:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 853:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  reverse element order.
 854:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 855:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reverse_iterator
 856:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 857:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 858:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 859:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 860:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 861:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 862:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  in reverse element order.
 863:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 864:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reverse_iterator
 865:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 866:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return reverse_iterator(begin()); }
 867:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 868:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 869:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 870:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 871:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  is done in reverse element order.
 872:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 873:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reverse_iterator
 874:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 875:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 36


 876:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 877:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 878:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 879:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 880:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 881:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element order.
 882:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 883:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator
 884:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       cbegin() const noexcept
 885:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 886:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 887:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 888:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 889:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 890:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  ordinary element order.
 891:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 892:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_iterator
 893:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       cend() const noexcept
 894:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 895:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 896:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 897:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 898:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 899:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  reverse element order.
 900:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 901:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reverse_iterator
 902:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       crbegin() const noexcept
 903:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 904:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 905:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 906:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 907:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 908:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  is done in reverse element order.
 909:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 910:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reverse_iterator
 911:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       crend() const noexcept
 912:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
 913:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 914:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 915:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // [23.2.4.2] capacity
 916:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 917:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size_type
 918:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 920:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 921:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 922:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size_type
 923:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 924:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 925:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 926:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 927:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 928:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 929:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 930:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 931:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
 932:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 37


 933:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 934:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  default constructed elements are appended.
 935:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 936:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 937:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       resize(size_type __new_size)
 938:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 939:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__new_size > size())
 940:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_default_append(__new_size - size());
 941:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else if (__new_size < size())
 942:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 943:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 944:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 945:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 946:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 947:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 948:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 949:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 950:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
 951:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
 952:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 953:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
 954:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  given data.
 955:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 956:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 957:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 958:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 959:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__new_size > size())
 960:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 961:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else if (__new_size < size())
 962:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 963:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 964:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
 965:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 966:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 967:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 968:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 969:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
 970:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
 971:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
 972:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 973:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
 974:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  given data.
 975:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 976:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 977:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 978:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 979:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__new_size > size())
 980:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
 981:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else if (__new_size < size())
 982:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 983:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 984:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 985:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 986:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
 987:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 988:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
 989:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       shrink_to_fit()
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 38


 990:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_shrink_to_fit(); }
 991:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
 992:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 993:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
 994:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns the total number of elements that the %vector can
 995:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  hold before needing to allocate more memory.
 996:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
 997:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size_type
 998:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 999:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1000:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			 - this->_M_impl._M_start); }
1001:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1002:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1003:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1004:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  equal end().)
1005:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1006:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _GLIBCXX_NODISCARD bool
1007:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
1008:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return begin() == end(); }
1009:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1010:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1011:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1012:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *          elements.
1013:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements required.
1014:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1015:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1016:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function attempts to reserve enough memory for the
1017:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1018:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  number requested is more than max_size(), length_error is
1019:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  thrown.
1020:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1021:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1022:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  necessity and the user can determine the number of elements
1023:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  that will be required, the user can reserve the memory in
1024:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1025:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  and copying of %vector data.
1026:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1027:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1028:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reserve(size_type __n);
1029:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1030:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // element access
1031:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1032:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1033:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1034:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  accessed.
1035:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  Read/write reference to data.
1036:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1037:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1038:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
1039:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1040:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  see at().)
1041:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1042:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reference
1043:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
1044:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1045:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1046:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 39


1047:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1048:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1049:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1050:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1051:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1052:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  accessed.
1053:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1054:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1055:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1056:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
1057:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1058:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  see at().)
1059:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1060:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reference
1061:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1062:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1063:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1064:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1065:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1066:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1067:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
1068:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /// Safety check used only from at().
1069:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1070:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_range_check(size_type __n) const
1071:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1072:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (__n >= this->size())
1073:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1074:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				       "(which is %zu) >= this->size() "
1075:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				       "(which is %zu)"),
1076:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				   __n, this->size());
1077:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1078:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1079:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     public:
1080:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1081:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1082:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1083:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  accessed.
1084:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  Read/write reference to data.
1085:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1086:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1087:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
1088:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1089:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
1090:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1091:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reference
1092:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       at(size_type __n)
1093:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1094:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_check(__n);
1095:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return (*this)[__n];
1096:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1097:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1098:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1099:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  accessed.
1102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 40


1104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
1106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
1108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reference
1110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       at(size_type __n) const
1111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_check(__n);
1113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return (*this)[__n];
1114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write reference to the data at the first
1118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element of the %vector.
1119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reference
1121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *begin();
1125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element of the %vector.
1130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reference
1132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *begin();
1136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read/write reference to the data at the last
1140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element of the %vector.
1141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       reference
1143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
1144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *(end() - 1);
1147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  last element of the %vector.
1152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const_reference
1154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return *(end() - 1);
1158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 41


1161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // data access
1163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _Tp*
1168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       const _Tp*
1172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // [23.2.4.3] modifiers
1176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be added.
1179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  available.
1185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       push_back(const value_type& __x)
1188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
1191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				     __x);
1194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    ++this->_M_impl._M_finish;
1195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
1196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
1197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	else
1198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       push_back(value_type&& __x)
1204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
1205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1206:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename... _Args>
1207:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus > 201402L
1208:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	reference
1209:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1210:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1211:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1212:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	emplace_back(_Args&&... __args);
1213:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1214:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1215:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1216:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Removes last element.
1217:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 42


1218:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1219:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1220:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that no data is returned, and if the last element's
1221:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1222:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  called.
1223:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1224:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1225:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1226:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1227:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1228:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	--this->_M_impl._M_finish;
1229:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1230:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1231:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1232:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1233:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1234:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1235:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1236:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1237:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __args  Arguments.
1238:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1239:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1240:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert an object of type T constructed
1241:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1242:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1243:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  and if it is frequently used the user should consider using
1244:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  std::list.
1245:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1246:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename... _Args>
1247:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	iterator
1248:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
1249:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1250:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1251:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1252:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1253:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1254:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1255:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1256:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1257:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a copy of the given value before
1258:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1259:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  used the user should consider using std::list.
1261:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1262:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1263:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1264:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1265:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1266:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1267:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1268:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1269:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1270:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1271:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a copy of the given value before
1272:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1273:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1274:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  used the user should consider using std::list.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 43


1275:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1277:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(iterator __position, const value_type& __x);
1278:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1279:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1280:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1281:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1282:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1283:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1284:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1285:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1286:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1287:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1289:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1290:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  used the user should consider using std::list.
1291:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1292:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1293:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1294:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1295:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1296:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1297:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1298:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1299:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __l  An initializer_list.
1300:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1301:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert copies of the data in the
1302:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  specified by @a position.
1304:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1305:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1306:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1307:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1308:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1309:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1310:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1311:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1312:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	auto __offset = __position - cbegin();
1313:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1314:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			std::random_access_iterator_tag());
1315:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return begin() + __offset;
1316:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1317:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1318:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1319:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1320:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1321:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1322:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1323:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1324:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1325:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1326:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1327:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1328:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1329:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1330:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1331:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 44


1332:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1334:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1337:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	difference_type __offset = __position - cbegin();
1338:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1339:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return begin() + __offset;
1340:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1341:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1342:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1344:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1345:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1347:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1348:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1349:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1351:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1352:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1354:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1355:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1356:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1357:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1358:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1360:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1361:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1362:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1363:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1364:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
1365:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last   An input iterator.
1366:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1367:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1368:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert copies of the data in the range
1369:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1370:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  by @a pos.
1371:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1372:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1373:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1374:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1375:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1376:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator,
1377:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1378:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	iterator
1379:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1380:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       _InputIterator __last)
1381:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1382:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1383:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_insert_dispatch(begin() + __offset,
1384:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			     __first, __last, __false_type());
1385:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  return begin() + __offset;
1386:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1387:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1388:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 45


1389:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1390:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1391:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  An input iterator.
1392:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last   An input iterator.
1393:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1394:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will insert copies of the data in the range
1395:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1396:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  by @a pos.
1397:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1398:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1399:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1400:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  consider using std::list.
1401:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1402:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1403:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1404:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1405:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	       _InputIterator __last)
1406:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1407:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1408:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1409:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1410:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1411:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1412:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1413:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1414:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Remove element at given position.
1415:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1416:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1417:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1418:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will erase the element at the given position and thus
1419:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  shorten the %vector by one.
1420:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1421:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1422:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1423:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
1424:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1425:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1426:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the pointer is the user's responsibility.
1427:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1428:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1429:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1430:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       erase(const_iterator __position)
1431:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1432:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1433:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       erase(iterator __position)
1434:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_erase(__position); }
1435:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1436:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1437:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1438:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Remove a range of elements.
1439:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1440:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1441:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *                  erased.
1442:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1443:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *           prior to erasing (or end()).
1444:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1445:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This function will erase the elements in the range
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 46


1446:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1447:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1448:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1449:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1450:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
1451:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the elements, and that if the elements themselves are
1452:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1454:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1455:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1456:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1457:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1458:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1459:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	const auto __beg = begin();
1460:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	const auto __cbeg = cbegin();
1461:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1462:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1463:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1464:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       erase(iterator __first, iterator __last)
1465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_erase(__first, __last); }
1466:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1467:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1468:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1469:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @brief  Swaps data with another %vector.
1470:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1471:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1472:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1473:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1474:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1475:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1476:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *
1477:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1478:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1479:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1480:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1481:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1482:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1483:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1484:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1485:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1486:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1487:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1488:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				  __x._M_get_Tp_allocator());
1489:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1490:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
1492:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1493:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1494:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1495:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  the user's responsibility.
1496:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1497:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1498:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1499:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1500:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1501:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****     protected:
1502:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       /**
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 47


1503:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1504:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1505:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****        */
1506:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1507:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	pointer
1508:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1509:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1510:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1511:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1512:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __try
1513:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
1514:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1515:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					  _M_get_Tp_allocator());
1516:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      return __result;
1517:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
1518:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __catch(...)
1519:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    {
1520:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      _M_deallocate(__result, __n);
1521:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      __throw_exception_again;
1522:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    }
1523:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1524:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1525:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1526:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Internal constructor functions follow.
1527:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1528:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1529:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1530:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus < 201103L
1531:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1532:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1533:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _Integer>
1534:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1535:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1536:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1537:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1538:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1539:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1540:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1541:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1542:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1543:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1544:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1545:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1546:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1547:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1548:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			       __false_type)
1549:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1550:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_range_initialize(__first, __last,
1551:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			      std::__iterator_category(__first));
1552:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1553:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1554:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1555:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1556:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1557:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1558:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1559:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    std::input_iterator_tag)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 48


1560:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1561:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __try {
1562:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    for (; __first != __last; ++__first)
1563:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1564:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      emplace_back(*__first);
1565:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1566:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	      push_back(*__first);
1567:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1568:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  } __catch(...) {
1569:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    clear();
1570:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    __throw_exception_again;
1571:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
1572:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1573:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1574:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1575:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1576:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1577:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1578:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			    std::forward_iterator_tag)
1579:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1580:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1581:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_start
1582:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1583:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1584:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  this->_M_impl._M_finish =
1585:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1586:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					this->_M_impl._M_start,
1587:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					_M_get_Tp_allocator());
1588:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1589:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1590:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1591:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // vector(n,value,a) constructor.
1592:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1593:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1594:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1595:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
1596:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1597:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					_M_get_Tp_allocator());
1598:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1599:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1600:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1601:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the vector(n) constructor.
1602:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1603:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_default_initialize(size_type __n)
1604:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1605:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	this->_M_impl._M_finish =
1606:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1607:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 					   _M_get_Tp_allocator());
1608:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1609:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1610:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1611:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1612:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // assignment work for the range versions.
1613:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1614:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1615:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1616:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 49


1617:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1618:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _Integer>
1619:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1620:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1621:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1622:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1623:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1624:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1625:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1626:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1627:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			   __false_type)
1628:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1629:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1630:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second assign_dispatch above
1631:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1632:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1633:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1634:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      std::input_iterator_tag);
1635:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1636:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second assign_dispatch above
1637:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1638:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1639:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1640:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      std::forward_iterator_tag);
1641:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1642:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1643:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // to be the same thing.
1644:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1645:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1646:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1647:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Internal insert functions follow.
1648:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1649:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1650:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1651:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1652:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1653:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _Integer>
1654:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1655:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1656:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			   __true_type)
1657:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1658:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1659:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1660:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1661:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1662:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1663:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			   _InputIterator __last, __false_type)
1664:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{
1665:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1666:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			  std::__iterator_category(__first));
1667:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	}
1668:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1669:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second insert_dispatch above
1670:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _InputIterator>
1671:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1672:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1673:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 50


1674:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1675:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by the second insert_dispatch above
1676:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _ForwardIterator>
1677:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1678:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1679:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1680:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1681:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1682:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // the same thing.
1683:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1684:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1685:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1686:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus >= 201103L
1687:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by resize(n).
1688:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1689:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_default_append(size_type __n);
1690:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1691:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       bool
1692:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_shrink_to_fit();
1693:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1694:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1695:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #if __cplusplus < 201103L
1696:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by insert(p,x)
1697:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1698:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1699:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1700:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       void
1701:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1702:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #else
1703:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1704:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1705:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       struct _Temporary_value
1706:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1707:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	template<typename... _Args>
1708:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  explicit
1709:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1710:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  {
1711:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1712:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 				     std::forward<_Args>(__args)...);
1713:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  }
1714:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1715:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	~_Temporary_value()
1716:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1717:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1718:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	value_type&
1719:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_val() { return *_M_ptr(); }
1720:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1721:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       private:
1722:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_Tp*
1723:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
1724:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1725:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	vector* _M_this;
1726:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
1727:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       };
1728:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1729:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1730:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 51


1731:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename _Arg>
1732:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1733:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1734:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1735:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename... _Args>
1736:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	void
1737:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1738:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1739:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1740:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1741:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1742:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1743:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1744:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       template<typename... _Args>
1745:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	iterator
1746:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1747:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1748:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1749:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       iterator
1750:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1751:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1752:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** #endif
1753:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1754:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1755:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       size_type
1756:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 327              		.loc 4 1756 7 is_stmt 1 view .LVU73
 328              	.LBB325:
 329              	.LBB326:
 330              	.LBI326:
 918:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 331              		.loc 4 918 7 view .LVU74
 332              	.LBB327:
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 333              		.loc 4 919 40 is_stmt 0 view .LVU75
 334 000e 4268     		ldr	r2, [r0, #4]
 335              	.LVL14:
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 336              		.loc 4 919 66 view .LVU76
 337 0010 0368     		ldr	r3, [r0]
 338              	.LVL15:
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 339              		.loc 4 919 50 view .LVU77
 340 0012 D31A     		subs	r3, r2, r3
 341              	.LVL16:
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 342              		.loc 4 919 50 view .LVU78
 343              	.LBE327:
 344              	.LBE326:
1757:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
1758:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	if (max_size() - size() < __n)
 345              		.loc 4 1758 2 view .LVU79
 346 0014 6FF06041 		mvn	r1, #-536870912
 347 0018 B1EBA30F 		cmp	r1, r3, asr #2
 348 001c 3DD0     		beq	.L29
 349 001e 0446     		mov	r4, r0
 350 0020 9D10     		asrs	r5, r3, #2
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 52


1759:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  __throw_length_error(__N(__s));
1760:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1761:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
 351              		.loc 4 1761 50 view .LVU80
 352 0022 0195     		str	r5, [sp, #4]
 353              	.LVL17:
 354              	.LBB328:
 355              	.LBI328:
 356              		.file 5 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** /*
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Copyright (c) 1994
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Hewlett-Packard Company
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Copyright (c) 1996-1998
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * representations about the suitability of this software for any
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 53


  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  */
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** /** @file bits/stl_algobase.h
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****  */
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/c++config.h>
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/functexcept.h>
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <ext/type_traits.h>
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <ext/numeric_traits.h>
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_pair.h>
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/stl_iterator.h>
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/concept_check.h>
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <debug/debug.h>
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #include <bits/predefined_ops.h>
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** # include <type_traits>
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus > 201703L
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** # include <compare>
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** {
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /*
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    */
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Up>
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline int
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    if (*__first1 != *__first2)
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return 0;
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       else
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 54


 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus < 201103L
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _BoolType>
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __iter_swap
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static void
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    _ValueType1;
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  *__a = *__b;
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  *__b = __tmp;
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __iter_swap<true>
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static void
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  swap(*__a, *__b);
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif // C++03
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  An iterator.
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another iterator.
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   Nothing.
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  iterators themselves.
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus < 201103L
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ValueType1;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 55


 163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ValueType2;
 165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ValueType2>)
 168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ValueType1>)
 170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ReferenceType1;
 173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_ReferenceType2;
 175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	iter_swap(__a, __b);
 179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #else
 180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // 187. iter_swap underspecified
 182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       swap(*__a, *__b);
 183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first1  A forward iterator.
 190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last1   A forward iterator.
 191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first2  A forward iterator.
 192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  The ranges must not overlap.
 197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _ForwardIterator2
 201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		_ForwardIterator2 __first2)
 203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 206:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator1>)
 207:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 208:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator2>)
 209:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 210:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 211:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 212:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 213:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first2;
 214:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 215:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 216:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 217:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 218:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 219:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 56


 220:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 221:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 222:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 223:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 224:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 225:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  preprocessor macro.
 226:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 227:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 228:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 229:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 230:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 231:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 232:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 233:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 234:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return __b < __a ? __b : __a;
 235:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__b < __a)
 236:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 237:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 238:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 239:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 240:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 241:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 242:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 243:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 244:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 245:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 246:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 247:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 248:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 249:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  preprocessor macro.
 250:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 251:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 252:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 253:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 254:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 357              		.loc 5 254 5 is_stmt 1 view .LVU81
 358              	.LBB329:
 255:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 256:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 257:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 258:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return  __a < __b ? __b : __a;
 259:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__a < __b)
 359              		.loc 5 259 7 is_stmt 0 view .LVU82
 360 0024 002D     		cmp	r5, #0
 361 0026 3BD0     		beq	.L24
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 261:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 362              		.loc 5 261 14 view .LVU83
 363 0028 01AB     		add	r3, sp, #4
 364              	.LVL18:
 365              	.L17:
 366              		.loc 5 261 14 view .LVU84
 367              	.LBE329:
 368              	.LBE328:
 369              		.loc 4 1761 33 view .LVU85
 370 002a 1B68     		ldr	r3, [r3]
 371              		.loc 4 1761 18 view .LVU86
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 57


 372 002c 1D44     		add	r5, r5, r3
 373              	.LVL19:
 374              	.LBB331:
 375              	.LBI331:
 918:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 376              		.loc 4 918 7 is_stmt 1 view .LVU87
 377              	.LBB332:
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 378              		.loc 4 919 66 is_stmt 0 view .LVU88
 379 002e 2368     		ldr	r3, [r4]
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 380              		.loc 4 919 50 view .LVU89
 381 0030 D21A     		subs	r2, r2, r3
 382              	.LVL20:
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 383              		.loc 4 919 50 view .LVU90
 384              	.LBE332:
 385              	.LBE331:
1762:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 386              		.loc 4 1762 48 view .LVU91
 387 0032 B5EBA20F 		cmp	r5, r2, asr #2
 388 0036 35D3     		bcc	.L25
 389              		.loc 4 1762 25 view .LVU92
 390 0038 B5F1005F 		cmp	r5, #536870912
 391 003c 35D2     		bcs	.L30
 392              	.LVL21:
 393              	.L18:
 394              		.loc 4 1762 25 view .LVU93
 395              	.LBE325:
 396              	.LBE324:
 427:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 428:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 429:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 430:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     void
 431:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     vector<_Tp, _Alloc>::
 432:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 433:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 434:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     {
 435:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       const size_type __len =
 436:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 437:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       pointer __old_start = this->_M_impl._M_start;
 397              		.loc 3 437 15 view .LVU94
 398 003e D4F80090 		ldr	r9, [r4]
 399              	.LVL22:
 438:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       pointer __old_finish = this->_M_impl._M_finish;
 400              		.loc 3 438 15 view .LVU95
 401 0042 D4F804A0 		ldr	r10, [r4, #4]
 402              	.LVL23:
 403              	.LBB335:
 404              	.LBI335:
 811:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 405              		.loc 4 811 7 is_stmt 1 view .LVU96
 406              	.LBB336:
 407              	.LBB337:
 408              	.LBI337:
 409              		.file 6 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // Iterators -*- C++ -*-
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 58


   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** /*
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Copyright (c) 1994
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Hewlett-Packard Company
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * representations about the suitability of this software for any
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Copyright (c) 1996-1998
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * representations about the suitability of this software for any
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  */
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** /** @file bits/stl_iterator.h
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****  */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 59


  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #include <ext/type_traits.h>
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #include <bits/move.h>
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #include <bits/ptr_traits.h>
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # include <type_traits>
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # define __cpp_lib_array_constexpr 201811L
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # define __cpp_lib_constexpr_iterator 201811L
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #elif __cplusplus == 201703L
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # define __cpp_lib_array_constexpr 201803L
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # include <compare>
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # include <new>
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # include <bits/iterator_concepts.h>
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** {
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    * @addtogroup iterators
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    * @{
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    */
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   namespace __detail
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   {
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     // Weaken iterator_category _Cat to _Limit if it is derived from that,
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     // otherwise use _Otherwise.
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using __clamp_iter_cat
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	= conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   }
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // 24.4.1 Reverse iterators
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @code
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @endcode
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 60


 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  the requirement that the iterators must be safe.
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class reverse_iterator
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Iterator current;
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using iterator_concept
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	= conditional_t<random_access_iterator<_Iterator>,
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 			random_access_iterator_tag,
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 			bidirectional_iterator_tag>;
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using iterator_category
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	= __detail::__clamp_iter_cat<typename __traits_type::iterator_category,
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 				     random_access_iterator_tag>;
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reverse_iterator() : current() { }
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The copy constructor is normal.
 171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 61


 173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : current(__x.current) { }
 175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
 177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<typename _Iter>
 185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	: current(__x.base()) { }
 188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       base() const
 194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return current; }
 195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A reference to the value at @c --current
 198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 206:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 207:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*() const
 208:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 209:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_Iterator __tmp = current;
 210:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *--__tmp;
 211:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 212:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 213:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 214:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 215:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 216:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 217:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 218:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 219:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator->() const
 220:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_concepts >= 201907L
 221:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       requires is_pointer_v<_Iterator>
 222:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	|| requires(const _Iterator __i) { __i.operator->(); }
 223:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 224:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 225:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 226:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 227:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_Iterator __tmp = current;
 228:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	--__tmp;
 229:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return _S_to_pointer(__tmp);
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 62


 230:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 231:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 232:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 233:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  @c *this
 234:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 235:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 236:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 237:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 238:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++()
 239:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 240:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	--current;
 241:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 242:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 243:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 244:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 245:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  The original value of @c *this
 246:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 247:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 248:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 249:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 250:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int)
 251:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 252:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 253:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	--current;
 254:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return __tmp;
 255:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 256:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 257:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 258:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  @c *this
 259:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Increments the underlying iterator.
 261:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 262:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 263:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator--()
 264:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 265:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++current;
 266:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 267:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 268:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 269:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 270:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 271:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 272:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Increments the underlying iterator.
 273:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 274:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 275:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator--(int)
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 277:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 278:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++current;
 279:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return __tmp;
 280:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 281:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 282:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 283:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 284:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 285:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 286:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 63


 287:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator+(difference_type __n) const
 289:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return reverse_iterator(current - __n); }
 290:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 291:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 292:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  *this
 293:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 294:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 295:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 296:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 297:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 298:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator+=(difference_type __n)
 299:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 300:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	current -= __n;
 301:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 302:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 304:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 305:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 306:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 307:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 308:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 309:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 310:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator-(difference_type __n) const
 311:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return reverse_iterator(current + __n); }
 312:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 313:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 314:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  *this
 315:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 316:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 317:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 318:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 319:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 320:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator-=(difference_type __n)
 321:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 322:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	current += __n;
 323:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 324:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 325:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 326:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 327:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 328:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 329:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 330:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 331:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 332:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator[](difference_type __n) const
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *(*this + __n); }
 334:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       friend constexpr iter_rvalue_reference_t<_Iterator>
 337:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       iter_move(const reverse_iterator& __i)
 338:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       noexcept(is_nothrow_copy_constructible_v<_Iterator>
 339:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       && noexcept(ranges::iter_move(--std::declval<_Iterator&>())))
 340:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 341:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	auto __tmp = __i.base();
 342:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return ranges::iter_move(--__tmp);
 343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 64


 344:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 345:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<indirectly_swappable<_Iterator> _Iter2>
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	friend constexpr void
 347:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	iter_swap(const reverse_iterator& __x,
 348:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		  const reverse_iterator<_Iter2>& __y)
 349:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	noexcept(is_nothrow_copy_constructible_v<_Iterator>
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		 && is_nothrow_copy_constructible_v<_Iter2>
 351:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		 && noexcept(ranges::iter_swap(--std::declval<_Iterator&>(),
 352:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 					       --std::declval<_Iter2&>())))
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	{
 354:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	  auto __xtmp = __x.base();
 355:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	  auto __ytmp = __y.base();
 356:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	  ranges::iter_swap(--__xtmp, --__ytmp);
 357:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	}
 358:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 360:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     private:
 361:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<typename _Tp>
 362:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 363:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 364:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         { return __p; }
 365:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 366:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<typename _Tp>
 367:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 368:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 369:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         { return __t.operator->(); }
 370:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
 371:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 372:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   //@{
 373:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 374:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 375:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 376:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @return  A simple bool.
 377:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 378:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Reverse iterators forward comparisons to their underlying base()
 379:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  iterators.
 380:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 381:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 382:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts
 383:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 384:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 385:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 386:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 387:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 388:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 389:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 390:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 391:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 392:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 393:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() < __x.base(); }
 394:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 395:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 396:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 397:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 398:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 399:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__x == __y); }
 400:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 65


 401:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 402:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 403:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 404:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 405:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y < __x; }
 406:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 407:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 408:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 409:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 410:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 411:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__y < __x); }
 412:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 413:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 414:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 415:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 416:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 417:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__x < __y); }
 418:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 419:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 420:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 421:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 422:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 423:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 424:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 425:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 426:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 427:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 428:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 429:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 430:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 431:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() < __x.base(); }
 432:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 433:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 434:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 435:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 436:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 437:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__x == __y); }
 438:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 439:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 440:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 441:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 442:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 443:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y < __x; }
 444:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 445:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 446:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 447:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 448:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 449:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__y < __x); }
 450:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 451:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 452:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 454:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 455:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return !(__x < __y); }
 456:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else // C++20
 457:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 66


 458:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 459:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 460:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 461:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }
 462:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 463:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 464:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 466:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 467:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 468:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() != __y.base() } -> convertible_to<bool>; }
 469:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() != __y.base(); }
 470:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 471:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 472:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 473:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 474:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 475:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() > __y.base() } -> convertible_to<bool>; }
 476:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() > __y.base(); }
 477:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 478:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 479:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 480:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 481:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 482:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }
 483:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() < __y.base(); }
 484:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 485:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 486:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 487:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 488:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 489:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() >= __y.base() } -> convertible_to<bool>; }
 490:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() >= __y.base(); }
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 492:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 493:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
 494:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 495:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 496:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires { { __x.base() <= __y.base() } -> convertible_to<bool>; }
 497:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __x.base() <= __y.base(); }
 498:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 499:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL,
 500:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	   three_way_comparable_with<_IteratorL> _IteratorR>
 501:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr compare_three_way_result_t<_IteratorL, _IteratorR>
 502:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=>(const reverse_iterator<_IteratorL>& __x,
 503:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		const reverse_iterator<_IteratorR>& __y)
 504:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() <=> __x.base(); }
 505:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif // C++20
 506:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   //@}
 507:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 508:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 509:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 510:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 511:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 512:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 513:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 514:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 67


 515:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 516:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 517:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 518:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 519:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 520:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 521:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 522:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 523:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 524:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 525:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 526:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 527:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 528:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 529:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 530:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 531:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 532:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 533:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 534:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 535:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 536:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 537:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
 538:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 539:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 540:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 541:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 542:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 543:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 544:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # if __cplusplus >= 201402L
 545:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 546:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 547:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 548:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // DR 2285. make_reverse_iterator
 549:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /// Generator function for reverse_iterator.
 550:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 551:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 552:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 553:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 554:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 555:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #  if __cplusplus > 201703L && defined __cpp_lib_concepts
 556:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator1, typename _Iterator2>
 557:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires (!sized_sentinel_for<_Iterator1, _Iterator2>)
 558:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline constexpr bool
 559:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     disable_sized_sentinel_for<reverse_iterator<_Iterator1>,
 560:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 			       reverse_iterator<_Iterator2>> = true;
 561:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #  endif // C++20
 562:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** # endif // C++14
 563:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 564:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 565:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 566:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     auto
 567:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 568:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 569:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 570:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 571:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 68


 572:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 573:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : __is_move_iterator<_Iterator>
 574:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { };
 575:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 576:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator>
 577:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 578:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     auto
 579:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 580:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 581:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 582:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif // C++11
 583:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 584:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 585:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 586:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 587:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 588:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 589:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 590:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  push_back.
 591:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 592:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 593:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  save typing.
 594:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 595:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 596:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class back_insert_iterator
 597:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 598:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 599:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 600:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Container* container;
 601:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 602:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 603:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 604:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Container          container_type;
 605:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
 606:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 607:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 608:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       constexpr back_insert_iterator() noexcept : container(nullptr) { }
 609:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 610:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 611:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 612:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 613:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator(_Container& __x)
 614:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : container(std::__addressof(__x)) { }
 615:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 616:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 617:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 618:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 619:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 620:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 621:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 622:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 623:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 624:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 625:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  always append the value to the end of the container.
 626:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 627:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 628:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 69


 629:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 630:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 631:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_back(__value);
 632:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 633:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 634:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 635:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 636:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 637:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 638:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 639:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_back(__value);
 640:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 641:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 642:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 643:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 644:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 645:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 646:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 647:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_back(std::move(__value));
 648:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 649:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 650:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 651:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 652:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.
 653:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 654:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 655:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*()
 656:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 657:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 658:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 659:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 660:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator&
 661:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++()
 662:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 663:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 664:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 665:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 666:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       back_insert_iterator
 667:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int)
 668:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 669:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
 670:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 671:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 672:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 673:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 674:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 675:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 676:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 677:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 678:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 679:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 680:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  types for you.
 681:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 682:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 683:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 684:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline back_insert_iterator<_Container>
 685:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     back_inserter(_Container& __x)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 70


 686:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 687:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 688:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 689:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 690:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 691:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 692:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 693:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  push_front.
 694:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 695:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 696:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  save typing.
 697:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 698:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 699:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class front_insert_iterator
 700:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 701:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 702:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 703:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Container* container;
 704:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 705:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 706:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 707:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Container          container_type;
 708:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L
 709:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 710:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 711:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       constexpr front_insert_iterator() noexcept : container(nullptr) { }
 712:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 713:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 714:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 715:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 716:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator(_Container& __x)
 717:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : container(std::__addressof(__x)) { }
 718:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 719:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 720:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 721:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 722:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 723:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 724:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 725:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 726:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 727:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 728:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  always prepend the value to the front of the container.
 729:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 730:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 731:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 732:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 733:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 734:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_front(__value);
 735:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 736:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 737:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 738:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 739:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 740:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 741:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 742:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_front(__value);
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 71


 743:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 744:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 745:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 746:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 747:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 748:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 749:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 750:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	container->push_front(std::move(__value));
 751:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 752:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 753:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 754:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 755:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.
 756:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 757:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 758:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*()
 759:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 760:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 761:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 762:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 763:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator&
 764:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++()
 765:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 766:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 767:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 768:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 769:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       front_insert_iterator
 770:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int)
 771:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 772:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
 773:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 774:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 775:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 776:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 777:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 778:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 779:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 780:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 781:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 782:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 783:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  types for you.
 784:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 785:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 786:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 787:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline front_insert_iterator<_Container>
 788:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     front_inserter(_Container& __x)
 789:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 790:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 791:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 792:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 793:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 794:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 795:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 796:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 797:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  position.
 798:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 799:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 72


 800:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  %iterator's position.)
 801:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 802:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 803:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  save typing.
 804:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 805:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 806:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class insert_iterator
 807:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 808:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 809:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 810:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using _Iter = std::__detail::__range_iter_t<_Container>;
 811:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 812:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 813:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Container* container = nullptr;
 814:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Iter iter = _Iter();
 815:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 816:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename _Container::iterator		_Iter;
 817:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 818:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 819:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Container* container;
 820:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Iter iter;
 821:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 822:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 823:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 824:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 825:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Container          container_type;
 826:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 827:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 828:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 829:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 830:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator() = default;
 831:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 832:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 833:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 834:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 835:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 836:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 837:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 838:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator(_Container& __x, _Iter __i)
 839:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 840:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 841:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /**
 842:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 843:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 844:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 845:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 846:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 847:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 848:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 849:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  value into the container at the place before the %iterator.
 850:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 851:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 852:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  insert values immediately after one another.  For example,
 853:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @code
 854:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     // vector v contains A and Z
 855:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 856:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 73


 857:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     i = 1;
 858:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     i = 2;
 859:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     i = 3;
 860:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *
 861:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 862:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****        *  @endcode
 863:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       */
 864:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus < 201103L
 865:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 866:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 867:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 868:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
 869:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++iter;
 870:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 871:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 872:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 873:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 874:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 875:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 876:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 877:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
 878:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++iter;
 879:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 880:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 881:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 882:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 883:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 884:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 885:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
 886:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 887:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++iter;
 888:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
 889:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
 890:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 891:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 892:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.
 893:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 894:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 895:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*()
 896:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 897:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 898:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 899:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 900:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 901:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++()
 902:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 903:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 904:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 905:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 906:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       insert_iterator&
 907:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int)
 908:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *this; }
 909:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
 910:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 911:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   /**
 912:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 913:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @param __i  An iterator into the container.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 74


 914:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 915:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *
 916:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 917:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 918:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 920:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 921:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    *  types for you.
 922:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   */
 923:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 924:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container>
 925:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr insert_iterator<_Container>
 926:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)
 927:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
 928:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
 929:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Container, typename _Iterator>
 930:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline insert_iterator<_Container>
 931:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 932:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 933:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       return insert_iterator<_Container>(__x,
 934:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 					 typename _Container::iterator(__i));
 935:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     }
 936:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 937:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 938:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // @} group iterators
 939:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 940:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 941:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** } // namespace
 942:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 943:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 944:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** {
 945:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 946:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 947:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 948:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 949:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 950:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 951:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 952:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // using this template can instantiate different types, even if the
 953:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _Iterator parameter is the same.
 954:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
 955:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     class __normal_iterator
 956:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     {
 957:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     protected:
 958:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _Iterator _M_current;
 959:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 960:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef std::iterator_traits<_Iterator>		__traits_type;
 961:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 962:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     public:
 963:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
 964:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 965:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 966:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 967:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 968:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 969:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 970:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 75


 971:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       using iterator_concept = std::__detail::__iter_concept<_Iterator>;
 972:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
 973:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 974:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 975:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(_Iterator()) { }
 976:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 977:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 978:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 410              		.loc 6 978 7 view .LVU97
 411              		.loc 6 978 7 is_stmt 0 view .LVU98
 412              	.LBE337:
 413              	.LBE336:
 414              	.LBE335:
 415              	.LBB338:
 416              	.LBI338:
 979:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 980:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 981:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // Allow iterator to const_iterator conversion
 982:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       template<typename _Iter>
 983:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         _GLIBCXX20_CONSTEXPR
 984:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 985:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 			  typename __enable_if<
 986:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 987:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 988:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****         : _M_current(__i.base()) { }
 989:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 990:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // Forward iterator requirements
 991:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 992:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reference
 993:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 994:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return *_M_current; }
 995:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
 996:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 997:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       pointer
 998:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 999:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return _M_current; }
1000:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1001:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1002:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator&
1003:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
1004:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
1005:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	++_M_current;
1006:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
1007:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
1008:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1009:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1010:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator
1011:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
1012:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current++); }
1013:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1014:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // Bidirectional iterator requirements
1015:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1016:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator&
1017:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
1018:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       {
1019:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	--_M_current;
1020:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	return *this;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 76


1021:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       }
1022:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1023:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1024:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator
1025:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
1026:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current--); }
1027:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1028:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       // Random access iterator requirements
1029:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1030:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       reference
1031:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
1032:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return _M_current[__n]; }
1033:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1034:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1035:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator&
1036:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
1037:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { _M_current += __n; return *this; }
1038:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1039:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1040:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator
1041:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
1042:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
1043:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1044:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1045:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator&
1046:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
1047:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { _M_current -= __n; return *this; }
1048:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1049:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1050:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       __normal_iterator
1051:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
1052:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
1053:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1054:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1055:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       const _Iterator&
1056:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
1057:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       { return _M_current; }
1058:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     };
1059:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1060:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
1061:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
1062:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
1063:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
1064:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
1065:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
1066:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
1067:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1068:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cpp_lib_three_way_comparison
1069:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1070:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     requires requires (_IteratorL __lhs, _IteratorR __rhs)
1071:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { { __lhs == __rhs } -> std::convertible_to<bool>; }
1072:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr bool
1073:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1074:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1075:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     noexcept(noexcept(__lhs.base() == __rhs.base()))
1076:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1077:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 77


1078:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1079:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>
1080:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1081:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 		const __normal_iterator<_IteratorR, _Container>& __rhs)
1082:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
1083:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
1084:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
1085:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****    // Forward iterator requirements
1086:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1087:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1088:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1089:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1090:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1091:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1092:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1093:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1094:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1095:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1096:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1097:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
1098:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1099:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
1114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // Random access iterator requirements
1119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
1122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
1130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 78


1135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
1145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
1160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline bool
1174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
1175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif // three-way comparison
1179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
1182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
1183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   // parameters.
1184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #if __cplusplus >= 201103L
1186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     // DR 685.
1187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline auto
1189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
1191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 79


1192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #else
1193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
1194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** #endif
1197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
1198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 
1199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
1202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 417              		.loc 6 1202 5 is_stmt 1 view .LVU99
 418              	.LBB339:
1203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 419              		.loc 6 1205 27 is_stmt 0 view .LVU100
 420 0046 A8EB090B 		sub	fp, r8, r9
 421              	.LVL24:
 422              		.loc 6 1205 27 view .LVU101
 423              	.LBE339:
 424              	.LBE338:
 425              	.LBB340:
 426              	.LBI340:
 343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 427              		.loc 4 343 7 is_stmt 1 view .LVU102
 428              	.LBB341:
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 429              		.loc 4 346 18 is_stmt 0 view .LVU103
 430 004a 9DB3     		cbz	r5, .L27
 431              	.LVL25:
 432              	.LBB342:
 433              	.LBI342:
 434              		.file 7 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Copyright (C) 2011-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** // <http://www.gnu.org/licenses/>.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 80


  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** /** @file bits/alloc_traits.h
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****  */
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #include <bits/stl_construct.h>
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #include <bits/memoryfwd.h>
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201103L
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # include <bits/allocator.h>
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # include <bits/ptr_traits.h>
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # include <ext/numeric_traits.h>
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** {
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201103L
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   struct __allocator_traits_base
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   {
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp, typename _Up>
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       struct __rebind<_Tp, _Up,
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   protected:
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     template<typename _Tp>
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   };
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Up>
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     using __alloc_rebind
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 81


  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   /**
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * @ingroup allocators
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   */
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator type
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef _Alloc allocator_type;
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocated type
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's pointer type.
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     private:
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Ptr
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	};
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using type = _Func<_Alloc>;
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	};
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Diff
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _PtrT>
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _A2, typename _DiffT>
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     public:
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's const pointer type.
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 82


 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's void pointer type.
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's difference type
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   The allocator's size type
 166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_copy_assignment
 179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
 186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_move_assignment
 188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c false_type
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 83


 195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_swap
 197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using is_always_equal
 206:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 207:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 208:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 209:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 210:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 211:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 212:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 213:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     private:
 214:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 215:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr auto
 216:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 217:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 218:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 219:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 220:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 221:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr pointer
 222:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 223:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.allocate(__n); }
 224:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 225:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 226:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	struct __construct_helper
 227:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 228:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  template<typename _Alloc2,
 229:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 230:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 231:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    static true_type __test(int);
 232:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 233:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  template<typename>
 234:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    static false_type __test(...);
 235:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 236:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 237:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	};
 238:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 239:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 240:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using __has_construct
 241:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 242:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 243:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 244:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 245:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 246:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 247:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 248:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 249:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 250:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 251:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 84


 252:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 253:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 254:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 255:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 256:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 257:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 258:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 259:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 261:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 262:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 263:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 264:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 265:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 266:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 267:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 268:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ __a.destroy(__p); }
 269:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 270:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 271:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 272:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 273:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 274:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ std::_Destroy(__p); }
 275:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 277:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr auto
 278:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 279:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.max_size())
 280:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.max_size(); }
 281:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 282:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 283:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr size_type
 284:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 285:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 286:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 287:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 289:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	    / sizeof(value_type);
 290:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 291:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 292:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 293:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr auto
 294:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 295:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 296:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 297:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 298:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Alloc2>
 299:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static constexpr _Alloc2
 300:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 301:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ return __a; }
 302:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     public:
 304:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 305:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 306:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 307:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 308:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 85


 309:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 310:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 311:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 312:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 313:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 314:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 315:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 316:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 317:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 318:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 319:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 320:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 321:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 322:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *          of type @c value_type
 323:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 324:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 325:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 326:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 327:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 328:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 329:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 330:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 331:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 332:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 334:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 337:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 338:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 339:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 340:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 341:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 342:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 344:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Construct an object of type @a _Tp
 345:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 347:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 348:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 349:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 351:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 352:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  arguments @a __args...
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 354:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 355:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 356:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 357:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 358:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 360:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 361:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 362:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 363:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 364:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 365:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 86


 366:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 367:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 368:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 369:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 370:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Tp>
 371:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 372:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 373:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 374:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 375:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 376:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 377:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  The maximum supported allocation size
 378:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 379:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 380:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 381:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 382:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 383:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 384:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 385:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 386:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return _S_max_size(__a, 0); }
 387:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 388:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 389:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 390:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 391:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 392:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 393:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 394:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 395:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 396:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 397:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 398:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return _S_select(__rhs, 0); }
 399:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     };
 400:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 401:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus > 201703L
 402:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 403:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 404:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 405:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   /// Partial specialization for std::allocator.
 406:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 407:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 408:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 409:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator type
 410:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 411:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 412:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocated type
 413:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using value_type = _Tp;
 414:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 415:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's pointer type.
 416:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using pointer = _Tp*;
 417:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 418:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's const pointer type.
 419:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_pointer = const _Tp*;
 420:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 421:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's void pointer type.
 422:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using void_pointer = void*;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 87


 423:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 424:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's const void pointer type.
 425:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using const_void_pointer = const void*;
 426:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 427:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's difference type
 428:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 429:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 430:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// The allocator's size type
 431:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using size_type = std::size_t;
 432:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 433:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 434:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 435:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 436:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on move assignment
 437:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 438:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 439:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// How the allocator is propagated on swap
 440:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using propagate_on_container_swap = false_type;
 441:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 442:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 443:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using is_always_equal = true_type;
 444:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 445:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up>
 446:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 447:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 448:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up>
 449:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 450:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 451:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 452:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 454:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 455:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 456:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 457:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 458:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 459:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 435              		.loc 7 459 7 is_stmt 1 view .LVU104
 436              	.LBB343:
 437              	.LBI343:
 438              		.file 8 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\ext\\
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 88


  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** /** @file ext/new_allocator.h
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****  */
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <bits/c++config.h>
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <new>
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <bits/functexcept.h>
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <bits/move.h>
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus >= 201103L
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #include <type_traits>
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** {
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****   /**
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  @ingroup allocators
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *    - all allocation calls operator new
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *    - all deallocation calls operator delete
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****    */
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****   template<typename _Tp>
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****     class new_allocator
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****     {
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****     public:
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef _Tp        value_type;
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef std::size_t     size_type;
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus <= 201703L
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef _Tp*       pointer;
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef const _Tp* const_pointer;
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef _Tp&       reference;
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef const _Tp& const_reference;
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       template<typename _Tp1>
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	struct rebind
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus >= 201103L
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 89


  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       template<typename _Tp1>
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus <= 201703L
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       pointer
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       { return std::__addressof(__x); }
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       const_pointer
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       { return std::__addressof(__x); }
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // about what the return value is when __n == 0.
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 439              		.loc 8 103 7 view .LVU105
 440              	.LBB344:
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	if (__n > this->_M_max_size())
 441              		.loc 8 105 2 is_stmt 0 view .LVU106
 442 004c B5F1005F 		cmp	r5, #536870912
 443 0050 2ED2     		bcs	.L31
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  std::__throw_bad_alloc();
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_aligned_new
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  {
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  }
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 444              		.loc 8 115 41 view .LVU107
 445 0052 A800     		lsls	r0, r5, #2
 446              	.LVL26:
 447              		.loc 8 115 41 view .LVU108
 448 0054 FFF7FEFF 		bl	_Znwj
 449              	.LVL27:
 450 0058 0746     		mov	r7, r0
 451              	.LVL28:
 452              	.L19:
 453              		.loc 8 115 41 view .LVU109
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 90


 454              	.LBE344:
 455              	.LBE343:
 456              	.LBE342:
 457              	.LBE341:
 458              	.LBE340:
 459              	.LBB349:
 460              	.LBI349:
 460:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return __a.allocate(__n); }
 461:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 462:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 463:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Allocate memory.
 464:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 466:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 467:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 468:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *          of type @c value_type
 469:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 470:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 471:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 472:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 473:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 474:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       {
 475:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 476:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return __a.allocate(__n, __hint);
 477:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 478:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return __a.allocate(__n);
 479:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 480:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       }
 481:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 482:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 483:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 484:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 485:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 486:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 487:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 488:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 489:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 490:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 492:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 493:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 494:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 495:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 496:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 497:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 498:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *	       an object of type `_Up`.
 499:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 500:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 501:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 502:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 503:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 504:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 505:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up, typename... _Args>
 506:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 507:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 461              		.loc 7 507 2 is_stmt 1 view .LVU110
 462              	.LBB350:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 91


 463              	.LBI350:
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       // __p is not permitted to be a null pointer.
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       void
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       deallocate(_Tp* __p, size_type __t)
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_aligned_new
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  {
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    ::operator delete(__p,
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** # if __cpp_sized_deallocation
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			      __t * sizeof(_Tp),
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** # endif
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			      std::align_val_t(alignof(_Tp)));
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	    return;
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	  }
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	::operator delete(__p
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_sized_deallocation
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			  , __t * sizeof(_Tp)
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #endif
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 			 );
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       }
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus <= 201703L
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       size_type
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       { return _M_max_size(); }
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cplusplus >= 201103L
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       template<typename _Up, typename... _Args>
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	void
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 464              		.loc 8 148 2 view .LVU111
 465              	.LBB351:
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 466              		.loc 8 150 4 is_stmt 0 view .LVU112
 467 005a 3368     		ldr	r3, [r6]
 468              	.LVL29:
 469              		.loc 8 150 4 view .LVU113
 470              	.LBE351:
 471              	.LBE350:
 472              	.LBE349:
 473              		.file 9 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\new"
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // The -*- C++ -*- dynamic memory management header.
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // Copyright (C) 1994-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // This file is part of GCC.
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** //
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // GCC is free software; you can redistribute it and/or modify
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // it under the terms of the GNU General Public License as published by
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // the Free Software Foundation; either version 3, or (at your option)
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // any later version.
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 92


  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // GCC is distributed in the hope that it will be useful,
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // GNU General Public License for more details.
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // 
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // Under Section 7 of GPL version 3, you are granted additional
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // permissions described in the GCC Runtime Library Exception, version
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // 3.1, as published by the Free Software Foundation.
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // You should have received a copy of the GNU General Public License and
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // <http://www.gnu.org/licenses/>.
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** /** @file new
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  This is a Standard C++ Library header.
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  handling memory allocation errors; see
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/dynamic_memory.html
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  for more.
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  */
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #ifndef _NEW
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #define _NEW
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #pragma GCC system_header
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #include <bits/c++config.h>
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #include <exception>
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #pragma GCC visibility push(default)
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** extern "C++" {
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** namespace std 
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** {
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   /**
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****    *  @brief  Exception possibly thrown by @c new.
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****    *  @ingroup exceptions
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****    *
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****    *  errors from the throwing forms of @c new.  */
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   class bad_alloc : public exception 
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   {
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   public:
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     bad_alloc() throw() { }
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #if __cplusplus >= 201103L
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     bad_alloc(const bad_alloc&) = default;
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     bad_alloc& operator=(const bad_alloc&) = default;
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #endif
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     // This declaration is not useless:
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     virtual ~bad_alloc() throw();
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 93


  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     // See comment in eh_exception.cc.
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     virtual const char* what() const throw();
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   };
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #if __cplusplus >= 201103L
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   class bad_array_new_length : public bad_alloc
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   {
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   public:
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     bad_array_new_length() throw() { }
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     // This declaration is not useless:
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     virtual ~bad_array_new_length() throw();
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     // See comment in eh_exception.cc.
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     virtual const char* what() const throw();
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   };
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #endif
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #if __cpp_aligned_new
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   enum class align_val_t: size_t {};
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #endif
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   struct nothrow_t
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   {
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #if __cplusplus >= 201103L
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****     explicit nothrow_t() = default;
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #endif
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   };
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   extern const nothrow_t nothrow;
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   /** If you write your own error handler to be called by @c new, it must
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****    *  be of this type.  */
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   typedef void (*new_handler)();
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   /// Takes a replacement handler as the argument, returns the
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   /// previous handler.
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   new_handler set_new_handler(new_handler) throw();
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #if __cplusplus >= 201103L
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   /// Return the current new handler.
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   new_handler get_new_handler() noexcept;
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #endif
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** } // namespace std
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** //@{
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** /** These are replaceable signatures:
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  - normal array new and delete (same)
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *    @c NULL on error)
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  - @c nothrow array new and delete (same)
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  Placement new and delete signatures (take a memory address argument,
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****  *  does nothing) may not be replaced by a user's program.
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 94


 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #if __cpp_sized_deallocation
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #endif
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__, __malloc__));
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__, __malloc__));
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #if __cpp_aligned_new
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, std::align_val_t)
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   __attribute__((__externally_visible__));
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, std::align_val_t)
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #if __cpp_sized_deallocation
 166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete(void*, std::size_t, std::align_val_t)
 167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** void operator delete[](void*, std::size_t, std::align_val_t)
 169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #endif // __cpp_sized_deallocation
 171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** #endif // __cpp_aligned_new
 172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** 
 173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** // Default placement versions of operator new.
 174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\new **** { return __p; }
 474              		.loc 9 175 3 is_stmt 1 view .LVU114
 475              	.LBB354:
 476              	.LBB353:
 477              	.LBB352:
 478              		.loc 8 150 4 is_stmt 0 view .LVU115
 479 005c 47F80B30 		str	r3, [r7, fp]
 480              	.LVL30:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 95


 481              		.loc 8 150 4 view .LVU116
 482              	.LBE352:
 483              	.LBE353:
 484              	.LBE354:
 485              	.LBB355:
 486              	.LBI355:
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 487              		.loc 4 465 7 is_stmt 1 view .LVU117
 488              	.LBB356:
 489              	.LBB357:
 490              	.LBI357:
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 491              		.loc 4 453 7 view .LVU118
 492              	.LBB358:
 493              	.LBI358:
 494              		.file 10 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** /*
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Copyright (c) 1994
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Hewlett-Packard Company
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 96


  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  */
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****  */
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus > 201402L
  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #include <bits/stl_pair.h>
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #include <type_traits>
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #include <ext/alloc_traits.h>
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** {
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /** @addtogroup memory
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @{
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    */
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_copy
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __first != __last; ++__first, (void)++__cur)
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      return __cur;
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 97


  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_copy<true>
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType1;
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType2;
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = true;
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #else
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::copy
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  "result type must be constructible from value type of input range");
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _RefType1;
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::copy
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::copy:
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return std::__uninitialized_copy<__is_trivial(_ValueType1)
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       && __is_trivial(_ValueType2)
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       && __assignable>::
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 98


 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		      const _Tp& __x)
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 163:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 164:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 165:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 166:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 167:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 168:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 169:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 170:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 171:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 172:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 173:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 174:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 175:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 176:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 177:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 178:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill<true>
 179:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 180:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 181:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 182:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 183:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		      const _Tp& __x)
 184:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 185:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 186:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 187:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 188:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 189:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 190:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 191:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 192:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 193:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 194:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   Nothing.
 195:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *
 196:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 197:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 198:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 199:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 200:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 201:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		       const _Tp& __x)
 202:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 205:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 206:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = true;
 207:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #else
 208:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 209:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 210:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 211:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  "result type must be constructible from input type");
 212:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 99


 213:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 214:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 215:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 216:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
 217:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 218:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::
 219:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 220:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 221:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 222:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 223:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 224:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 225:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill_n
 226:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 227:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 228:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 229:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 230:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			const _Tp& __x)
 231:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 232:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 233:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 234:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 235:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 236:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 237:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      return __cur;
 238:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 239:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 240:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 241:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 242:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 243:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 244:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 245:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 246:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 247:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 248:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 249:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 250:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 251:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 252:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 253:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			const _Tp& __x)
 254:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 255:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 256:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 257:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 258:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 259:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 261:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 262:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 263:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 264:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 265:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 266:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   Nothing.
 267:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *
 268:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 269:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 100


 270:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 271:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 272:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 273:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 274:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 275:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 277:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = true;
 278:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #else
 279:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted copy constructor, but the std::fill
 280:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // optimization that uses memmove would happily "copy" them anyway.
 281:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, const _Tp&>::value,
 282:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  "result type must be constructible from input type");
 283:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 284:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // Trivial types can have deleted assignment, so using std::fill
 285:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // would be ill-formed. Require assignability before using std::fill:
 286:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 287:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
 288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_fill_n<__is_trivial(_ValueType) && __assignable>::
 289:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 290:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 291:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 292:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 293:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 294:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 295:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 296:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 297:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 298:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  any of the POD optimizations.
 299:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 300:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 301:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 302:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 304:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 305:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 306:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 307:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 308:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 309:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 310:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 311:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 312:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 313:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 314:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 315:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 316:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 317:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 318:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 319:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 320:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 321:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 322:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 323:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 324:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 325:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 326:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 101


 327:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 328:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 329:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 330:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 331:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 332:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 334:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					 __result, __alloc);
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 337:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 338:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 339:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 340:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 341:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 342:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       _InputIterator __last,
 343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       _ForwardIterator __result,
 344:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       _Allocator& __alloc)
 345:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a
 347:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 348:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 349:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 351:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 352:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     void
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 354:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 355:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 356:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 357:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 358:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 360:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 361:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 362:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 363:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 364:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 365:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 366:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 367:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 368:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 369:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 370:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 371:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 372:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 373:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 374:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 375:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 376:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 377:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 378:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 379:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 380:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 381:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 382:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 383:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 102


 384:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 385:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 386:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 387:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 388:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 389:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 390:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 391:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 392:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 393:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 394:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 395:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 396:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 397:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 398:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Tp2>
 399:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 400:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 401:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 402:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::uninitialized_fill_n(__first, __n, __x); }
 403:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 404:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 405:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
 406:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_fill_move, __uninitialized_move_fill.
 407:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // All of these algorithms take a user-supplied allocator, which is used
 408:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // for construction and destruction.
 409:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 410:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_copy_move
 411:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Copies [first1, last1) into [result, result + (last1 - first1)), and
 412:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  move [first2, last2) into
 413:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 414:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 415:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 416:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 417:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_move(_InputIterator1 __first1,
 418:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator1 __last1,
 419:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __first2,
 420:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __last2,
 421:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __result,
 422:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 423:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 424:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 425:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							   __result,
 426:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							   __alloc);
 427:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 428:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 429:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 430:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 431:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 432:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 433:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 434:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 435:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 436:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 437:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 438:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_move_copy
 439:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Moves [first1, last1) into [result, result + (last1 - first1)), and
 440:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  copies [first2, last2) into
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 103


 441:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 442:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 443:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 444:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 445:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_copy(_InputIterator1 __first1,
 446:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator1 __last1,
 447:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __first2,
 448:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator2 __last2,
 449:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __result,
 450:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 451:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 452:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							   __result,
 454:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							   __alloc);
 455:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 456:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 457:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 458:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 459:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 460:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 461:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 462:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 463:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 464:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   
 466:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_fill_move
 467:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [result, mid) with x, and moves [first, last) into
 468:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  [mid, mid + (last - first)).
 469:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
 470:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 471:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 472:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
 473:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      const _Tp& __x, _InputIterator __first,
 474:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _InputIterator __last, _Allocator& __alloc)
 475:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 476:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
 477:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 478:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 479:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 480:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 481:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 482:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 483:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 484:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 485:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 486:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 487:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 488:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_move_fill
 489:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
 490:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   //  fills [first2 + (last1 - first1), last2) with x.
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
 492:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _Allocator>
 493:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 494:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
 495:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __first2,
 496:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __last2, const _Tp& __x,
 497:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 104


 498:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 499:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
 500:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							    __first2,
 501:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 							    __alloc);
 502:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 503:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 504:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 505:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 506:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 507:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 508:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first2, __mid2, __alloc);
 509:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 510:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 511:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 512:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 513:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 514:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 515:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
 516:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 517:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 518:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Extensions: __uninitialized_default, __uninitialized_default_n,
 519:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_a, __uninitialized_default_n_a.
 520:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 521:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 522:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_1
 523:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 524:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 525:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 526:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 527:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 528:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 529:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 530:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 531:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 532:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 533:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 534:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 535:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 536:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 537:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 538:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 539:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 540:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 541:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 542:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 543:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_1<true>
 544:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 545:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 546:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 547:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 548:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 549:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 550:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    _ValueType;
 551:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 552:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::fill(__first, __last, _ValueType());
 553:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 554:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 105


 555:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 556:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 557:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_n_1
 558:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 559:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 560:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 561:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 562:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 563:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 564:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 565:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 566:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 567:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 568:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      return __cur;
 569:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 570:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 571:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 572:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 573:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 574:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 575:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 576:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 577:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 578:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 579:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_n_1<true>
 580:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 581:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 582:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static _ForwardIterator
 583:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 584:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 585:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef typename iterator_traits<_ForwardIterator>::value_type
 586:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    _ValueType;
 587:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 588:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return std::fill_n(__first, __n, _ValueType());
 589:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 590:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 591:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 592:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default
 593:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 594:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // constructed value_types(s).
 595:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator>
 596:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 597:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default(_ForwardIterator __first,
 598:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			    _ForwardIterator __last)
 599:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 600:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 601:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 602:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // trivial types can have deleted assignment
 603:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 604:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 605:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_default_1<__is_trivial(_ValueType)
 606:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				     && __assignable>::
 607:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default(__first, __last);
 608:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 609:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 610:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_n
 611:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_type(s).
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 106


 612:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 613:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 614:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 615:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 616:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 617:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 618:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       // trivial types can have deleted assignment
 619:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 620:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 621:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_n_1<__is_trivial(_ValueType)
 622:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				       && __assignable>::
 623:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_n(__first, __n);
 624:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 625:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 626:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 627:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_a
 628:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default
 629:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // constructed value_types(s), constructed with the allocator alloc.
 630:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Allocator>
 631:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     void
 632:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 633:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __last,
 634:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 635:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 636:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 637:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 638:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 639:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 640:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 641:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 642:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 643:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 644:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 645:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 646:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 647:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 648:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 649:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 650:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 651:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 652:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 653:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __last,
 654:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      allocator<_Tp>&)
 655:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { std::__uninitialized_default(__first, __last); }
 656:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 657:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 658:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_n_a
 659:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, first + n) with n default constructed value_types(s),
 660:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // constructed with the allocator alloc.
 661:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Allocator>
 662:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 663:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 664:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				_Allocator& __alloc)
 665:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 666:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 667:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 668:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 107


 669:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 670:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 671:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 672:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 673:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 674:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 675:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 676:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 677:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 678:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 679:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 680:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 681:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 682:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 683:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
 684:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				allocator<_Tp>&)
 685:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::__uninitialized_default_n(__first, __n); }
 686:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 687:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 688:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_1
 689:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 690:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 691:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	static void
 692:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue(_ForwardIterator __first,
 693:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				 _ForwardIterator __last)
 694:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 695:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 696:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 697:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 698:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 699:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 700:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 701:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 702:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 703:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 704:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 705:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 706:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 707:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 708:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 709:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 710:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_1<true>
 711:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 712:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 713:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         static void
 714:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         __uninit_default_novalue(_ForwardIterator __first,
 715:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				 _ForwardIterator __last)
 716:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 717:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 718:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 719:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 720:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 721:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1
 722:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 723:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 724:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	static _ForwardIterator
 725:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 108


 726:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 727:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 728:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __try
 729:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 730:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 731:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 732:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      return __cur;
 733:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 734:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __catch(...)
 735:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    {
 736:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 737:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	      __throw_exception_again;
 738:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    }
 739:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 740:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 741:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 742:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<>
 743:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1<true>
 744:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 745:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 746:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	static _ForwardIterator
 747:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 748:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{ return std::next(__first, __n); }
 749:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     };
 750:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 751:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_novalue
 752:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, last) with std::distance(first, last) default-initialized
 753:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // value_types(s).
 754:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator>
 755:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 756:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_novalue(_ForwardIterator __first,
 757:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				    _ForwardIterator __last)
 758:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 759:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 760:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 761:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 762:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       std::__uninitialized_default_novalue_1<
 763:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 764:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue(__first, __last);
 765:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 766:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 767:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // __uninitialized_default_n
 768:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Fills [first, first + n) with n default-initialized value_type(s).
 769:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 770:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 771:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
 772:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 773:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 774:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
 775:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 776:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_novalue_n_1<
 777:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 778:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(__first, __n);
 779:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 780:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 781:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 782:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 109


 783:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     _ForwardIterator
 784:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n(_InputIterator __first, _Size __n,
 785:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 786:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 787:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 788:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 789:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 790:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 791:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 792:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return __cur;
 793:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 794:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 795:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 796:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 797:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 798:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 799:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 800:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 801:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 802:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 803:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 804:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
 805:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result,
 806:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   random_access_iterator_tag)
 807:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __first + __n, __result); }
 808:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 809:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 810:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 811:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     pair<_InputIterator, _ForwardIterator>
 812:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 813:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 814:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 815:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 816:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __try
 817:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 818:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 819:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 820:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  return {__first, __cur};
 821:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 822:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __catch(...)
 823:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	{
 824:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 825:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  __throw_exception_again;
 826:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	}
 827:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 828:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 829:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 830:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 831:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline pair<_RandomAccessIterator, _ForwardIterator>
 832:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
 833:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   _ForwardIterator __result,
 834:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			   random_access_iterator_tag)
 835:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 836:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       auto __second_res = uninitialized_copy(__first, __first + __n, __result);
 837:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       auto __first_res = std::next(__first, __n);
 838:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return {__first_res, __second_res};
 839:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 110


 840:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 841:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 842:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 843:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 844:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Copies the range [first,first+n) into result.
 845:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 846:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __n      The number of elements to copy.
 847:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 848:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return  __result + __n
 849:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *
 850:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  Like copy_n(), but does not require an initialized output range.
 851:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 852:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 853:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 854:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_copy_n(_InputIterator __first, _Size __n,
 855:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			 _ForwardIterator __result)
 856:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     { return std::__uninitialized_copy_n(__first, __n, __result,
 857:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					 std::__iterator_category(__first)); }
 858:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 859:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 860:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 861:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 862:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 863:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			      _ForwardIterator __result)
 864:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 865:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return
 866:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	std::__uninitialized_copy_n_pair(__first, __n, __result,
 867:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					 std::__iterator_category(__first));
 868:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 869:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @endcond
 870:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif
 871:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 872:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201703L
 873:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** # define __cpp_lib_raw_memory_algorithms 201606L
 874:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 875:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 876:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,last).
 877:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 878:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   A forward iterator.
 879:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 880:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator>
 881:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 882:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_default_construct(_ForwardIterator __first,
 883:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				    _ForwardIterator __last)
 884:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 885:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __uninitialized_default_novalue(__first, __last);
 886:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 887:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 888:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 889:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,first+count).
 890:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 891:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
 892:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   __first + __count
 893:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 894:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 895:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 896:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 111


 897:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 898:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_novalue_n(__first, __count);
 899:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 900:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 901:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 902:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,last).
 903:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 904:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   A forward iterator.
 905:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 906:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator>
 907:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 908:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_value_construct(_ForwardIterator __first,
 909:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				  _ForwardIterator __last)
 910:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 911:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default(__first, __last);
 912:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 913:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 914:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 915:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,first+count).
 916:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 917:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
 918:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   __result + __count
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 920:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 921:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 922:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)
 923:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 924:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __uninitialized_default_n(__first, __count);
 925:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 926:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 927:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 928:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Move-construct from the range [first,last) into result.
 929:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 930:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 931:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 932:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 933:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 934:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator>
 935:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
 936:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_move(_InputIterator __first, _InputIterator __last,
 937:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 938:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 939:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return std::uninitialized_copy
 940:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 941:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);
 942:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 943:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 944:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /**
 945:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @brief Move-construct from the range [first,first+count) into result.
 946:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 947:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to initialize.
 948:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 949:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****    *  @return  __result + __count
 950:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   */
 951:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _Size, typename _ForwardIterator>
 952:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 953:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     uninitialized_move_n(_InputIterator __first, _Size __count,
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 112


 954:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			 _ForwardIterator __result)
 955:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 956:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       auto __res = std::__uninitialized_copy_n_pair
 957:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 958:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	 __count, __result);
 959:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return {__res.first.base(), __res.second};
 960:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 961:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #endif // C++17
 962:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 963:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
 964:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   /// @cond undocumented
 965:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 966:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _Tp, typename _Up, typename _Allocator>
 967:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline void
 968:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 969:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			_Allocator& __alloc)
 970:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
 971:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			 __dest, std::move(*__orig)))
 972:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	     && noexcept(std::allocator_traits<_Allocator>::destroy(
 973:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 			    __alloc, std::__addressof(*__orig))))
 974:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 975:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef std::allocator_traits<_Allocator> __traits;
 976:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __traits::construct(__alloc, __dest, std::move(*__orig));
 977:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       __traits::destroy(__alloc, std::__addressof(*__orig));
 978:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 979:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 980:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // This class may be specialized for specific types.
 981:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   // Also known as is_trivially_relocatable.
 982:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template<typename _Tp, typename = void>
 983:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     struct __is_bitwise_relocatable
 984:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     : is_trivial<_Tp> { };
 985:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 986:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _Tp, typename _Up>
 987:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
 988:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __relocate_a_1(_Tp* __first, _Tp* __last,
 989:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		   _Tp* __result, allocator<_Up>&) noexcept
 990:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 991:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       ptrdiff_t __count = __last - __first;
 992:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       if (__count > 0)
 993:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 994:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __result + __count;
 995:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 996:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
 997:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
 998:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    typename _Allocator>
 999:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
1000:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __relocate_a_1(_InputIterator __first, _InputIterator __last,
1001:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
1002:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
1003:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					       std::addressof(*__first),
1004:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 					       __alloc)))
1005:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
1006:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1007:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType;
1008:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1009:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	_ValueType2;
1010:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       static_assert(std::is_same<_ValueType, _ValueType2>::value,
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 113


1011:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	  "relocation is only possible for values of the same type");
1012:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
1013:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       for (; __first != __last; ++__first, (void)++__cur)
1014:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
1015:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
1016:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __cur;
1017:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
1018:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 
1019:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
1020:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	    typename _Allocator>
1021:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     inline _ForwardIterator
1022:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     __relocate_a(_InputIterator __first, _InputIterator __last,
 495              		.loc 10 1022 5 view .LVU119
 496              	.LBB359:
 497              	.LBI359:
 988:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		   _Tp* __result, allocator<_Up>&) noexcept
 498              		.loc 10 988 5 view .LVU120
 499              	.LBB360:
 991:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       if (__count > 0)
 500              		.loc 10 991 34 is_stmt 0 view .LVU121
 501 0060 A8EB0906 		sub	r6, r8, r9
 502              	.LVL31:
 992:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 503              		.loc 10 992 7 view .LVU122
 504 0064 002E     		cmp	r6, #0
 505 0066 27DC     		bgt	.L32
 506              	.L21:
 994:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 507              		.loc 10 994 25 view .LVU123
 508 0068 3E44     		add	r6, r6, r7
 509              	.LVL32:
 994:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 510              		.loc 10 994 25 view .LVU124
 511              	.LBE360:
 512              	.LBE359:
 513              	.LBE358:
 514              	.LBE357:
 515              	.LBE356:
 516              	.LBE355:
 439:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       const size_type __elems_before = __position - begin();
 440:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 441:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       pointer __new_finish(__new_start);
 442:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       __try
 443:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 444:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // The order of the three operations is dictated by the C++11
 445:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // case, where the moves could alter a new element belonging
 446:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // to the existing vector.  This is an issue only for callers
 447:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // taking the element by lvalue ref (see last bullet of C++11
 448:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  // [res.on.arguments]).
 449:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl,
 450:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   __new_start + __elems_before,
 451:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 452:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   std::forward<_Args>(__args)...);
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #else
 454:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   __x);
 455:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 456:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  __new_finish = pointer();
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 114


 457:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 458:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 459:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 460:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 461:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __new_finish = _S_relocate(__old_start, __position.base(),
 462:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					 __new_start, _M_get_Tp_allocator());
 463:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 464:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      ++__new_finish;
 517              		.loc 3 464 8 view .LVU125
 518 006a 0436     		adds	r6, r6, #4
 519              	.LVL33:
 520              	.LBB366:
 521              	.LBI366:
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 522              		.loc 4 465 7 is_stmt 1 view .LVU126
 523              	.LBB367:
 524              	.LBB368:
 525              	.LBI368:
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 526              		.loc 4 453 7 view .LVU127
 527              	.LBB369:
 528              	.LBI369:
 529              		.loc 10 1022 5 view .LVU128
 530              	.LBB370:
 531              	.LBI370:
 988:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 		   _Tp* __result, allocator<_Up>&) noexcept
 532              		.loc 10 988 5 view .LVU129
 533              	.LBB371:
 991:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       if (__count > 0)
 534              		.loc 10 991 34 is_stmt 0 view .LVU130
 535 006c AAEB080A 		sub	r10, r10, r8
 536              	.LVL34:
 992:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 537              		.loc 10 992 7 view .LVU131
 538 0070 BAF1000F 		cmp	r10, #0
 539 0074 26DC     		bgt	.L33
 540              	.L22:
 994:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 541              		.loc 10 994 25 view .LVU132
 542 0076 5644     		add	r6, r6, r10
 543              	.LVL35:
 994:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     }
 544              		.loc 10 994 25 view .LVU133
 545              	.LBE371:
 546              	.LBE370:
 547              	.LBE369:
 548              	.LBE368:
 549              	.LBE367:
 550              	.LBE366:
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 466:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __new_finish = _S_relocate(__position.base(), __old_finish,
 467:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 					 __new_finish, _M_get_Tp_allocator());
 468:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 469:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
 470:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 471:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    {
 472:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __new_finish
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 115


 473:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 474:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		(__old_start, __position.base(),
 475:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 476:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 477:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      ++__new_finish;
 478:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 
 479:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	      __new_finish
 480:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 481:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		(__position.base(), __old_finish,
 482:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 483:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    }
 484:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 485:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       __catch(...)
 486:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	{
 487:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  if (!__new_finish)
 488:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 489:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 				   __new_start + __elems_before);
 490:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  else
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 492:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  _M_deallocate(__new_start, __len);
 493:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  __throw_exception_again;
 494:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	}
 495:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus >= 201103L
 496:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 497:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 498:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 499:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_REINIT;
 500:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       _M_deallocate(__old_start,
 501:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 551              		.loc 3 501 21 view .LVU134
 552 0078 A168     		ldr	r1, [r4, #8]
 553              		.loc 3 501 39 view .LVU135
 554 007a A1EB0901 		sub	r1, r1, r9
 555              	.LVL36:
 556              	.LBB377:
 557              	.LBI377:
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 558              		.loc 4 350 7 is_stmt 1 view .LVU136
 559              	.LBB378:
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 560              		.loc 4 353 2 is_stmt 0 view .LVU137
 561 007e B9F1000F 		cmp	r9, #0
 562 0082 02D0     		beq	.L23
 563              	.LVL37:
 564              	.LBB379:
 565              	.LBI379:
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 566              		.loc 7 491 7 is_stmt 1 view .LVU138
 567              	.LBB380:
 568              	.LBB381:
 569              	.LBI381:
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 570              		.loc 8 120 7 view .LVU139
 571              	.LBB382:
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_sized_deallocation
 572              		.loc 8 133 19 is_stmt 0 view .LVU140
 573 0084 4846     		mov	r0, r9
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 116


 574 0086 FFF7FEFF 		bl	_ZdlPvj
 575              	.LVL38:
 576              	.L23:
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_sized_deallocation
 577              		.loc 8 133 19 view .LVU141
 578              	.LBE382:
 579              	.LBE381:
 580              	.LBE380:
 581              	.LBE379:
 582              	.LBE378:
 583              	.LBE377:
 502:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       this->_M_impl._M_start = __new_start;
 584              		.loc 3 502 30 view .LVU142
 585 008a 2760     		str	r7, [r4]
 503:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 586              		.loc 3 503 31 view .LVU143
 587 008c 6660     		str	r6, [r4, #4]
 504:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 588              		.loc 3 504 53 view .LVU144
 589 008e 07EB8505 		add	r5, r7, r5, lsl #2
 590              	.LVL39:
 591              		.loc 3 504 39 view .LVU145
 592 0092 A560     		str	r5, [r4, #8]
 505:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****     }
 593              		.loc 3 505 5 view .LVU146
 594 0094 03B0     		add	sp, sp, #12
 595              	.LCFI7:
 596              		.cfi_remember_state
 597              		.cfi_def_cfa_offset 36
 598              		@ sp needed
 599 0096 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 600              	.LVL40:
 601              	.L29:
 602              	.LCFI8:
 603              		.cfi_restore_state
 604              	.LBB383:
 605              	.LBB334:
1759:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 606              		.loc 4 1759 24 view .LVU147
 607 009a 0D48     		ldr	r0, .L34
 608              	.LVL41:
1759:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 609              		.loc 4 1759 24 view .LVU148
 610 009c FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 611              	.LVL42:
 612              	.L24:
 613              	.LBB333:
 614              	.LBB330:
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 615              		.loc 5 260 9 view .LVU149
 616 00a0 6B46     		mov	r3, sp
 617 00a2 C2E7     		b	.L17
 618              	.LVL43:
 619              	.L25:
 260:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 620              		.loc 5 260 9 view .LVU150
 621              	.LBE330:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 117


 622              	.LBE333:
 623              		.loc 4 1762 58 view .LVU151
 624 00a4 6FF06045 		mvn	r5, #-536870912
 625              	.LVL44:
 626              		.loc 4 1762 58 view .LVU152
 627 00a8 C9E7     		b	.L18
 628              	.LVL45:
 629              	.L30:
 630              		.loc 4 1762 58 view .LVU153
 631 00aa 6FF06045 		mvn	r5, #-536870912
 632              	.LVL46:
 633              		.loc 4 1762 58 view .LVU154
 634 00ae C6E7     		b	.L18
 635              	.LVL47:
 636              	.L31:
 637              		.loc 4 1762 58 view .LVU155
 638              	.LBE334:
 639              	.LBE383:
 640              	.LBB384:
 641              	.LBB348:
 642              	.LBB347:
 643              	.LBB346:
 644              	.LBB345:
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 645              		.loc 8 106 26 view .LVU156
 646 00b0 FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 647              	.LVL48:
 648              	.L27:
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 649              		.loc 8 106 26 view .LVU157
 650              	.LBE345:
 651              	.LBE346:
 652              	.LBE347:
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 653              		.loc 4 346 18 view .LVU158
 654 00b4 0027     		movs	r7, #0
 655 00b6 D0E7     		b	.L19
 656              	.LVL49:
 657              	.L32:
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 658              		.loc 4 346 18 view .LVU159
 659              	.LBE348:
 660              	.LBE384:
 661              	.LBB385:
 662              	.LBB365:
 663              	.LBB364:
 664              	.LBB363:
 665              	.LBB362:
 666              	.LBB361:
 993:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __result + __count;
 667              		.loc 10 993 19 view .LVU160
 668 00b8 3246     		mov	r2, r6
 669 00ba 4946     		mov	r1, r9
 670 00bc 3846     		mov	r0, r7
 671 00be FFF7FEFF 		bl	memmove
 672              	.LVL50:
 673 00c2 D1E7     		b	.L21
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 118


 674              	.LVL51:
 675              	.L33:
 993:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****       return __result + __count;
 676              		.loc 10 993 19 view .LVU161
 677              	.LBE361:
 678              	.LBE362:
 679              	.LBE363:
 680              	.LBE364:
 681              	.LBE365:
 682              	.LBE385:
 683              	.LBB386:
 684              	.LBB376:
 685              	.LBB375:
 686              	.LBB374:
 687              	.LBB373:
 688              	.LBB372:
 689 00c4 5246     		mov	r2, r10
 690 00c6 4146     		mov	r1, r8
 691 00c8 3046     		mov	r0, r6
 692 00ca FFF7FEFF 		bl	memmove
 693              	.LVL52:
 694 00ce D2E7     		b	.L22
 695              	.L35:
 696              		.align	2
 697              	.L34:
 698 00d0 00000000 		.word	.LC0
 699              	.LBE372:
 700              	.LBE373:
 701              	.LBE374:
 702              	.LBE375:
 703              	.LBE376:
 704              	.LBE386:
 705              		.cfi_endproc
 706              	.LFE1390:
 707              		.fnend
 709              		.section	.text._ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_,"axG",%progbits,_ZNSt6vectorIiSaIiEE
 710              		.align	1
 711              		.weak	_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu fpv4-sp-d16
 717              	_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_:
 718              		.fnstart
 719              	.LVL53:
 720              	.LFB1372:
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       emplace_back(_Args&&... __args)
 721              		.loc 3 109 7 is_stmt 1 view -0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc ****       emplace_back(_Args&&... __args)
 725              		.loc 3 109 7 is_stmt 0 view .LVU163
 726 0000 08B5     		push	{r3, lr}
 727              		.save {r3, lr}
 728              	.LCFI9:
 729              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 119


 730              		.cfi_offset 3, -8
 731              		.cfi_offset 14, -4
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 732              		.loc 3 112 20 view .LVU164
 733 0002 4368     		ldr	r3, [r0, #4]
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 734              		.loc 3 112 47 view .LVU165
 735 0004 8268     		ldr	r2, [r0, #8]
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	  {
 736              		.loc 3 112 2 view .LVU166
 737 0006 9342     		cmp	r3, r2
 738 0008 05D0     		beq	.L37
 739              	.LVL54:
 740              	.LBB387:
 741              	.LBI387:
 742              		.loc 7 507 2 is_stmt 1 view .LVU167
 743              	.LBB388:
 744              	.LBI388:
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 745              		.loc 8 148 2 view .LVU168
 746              	.LBB389:
 747              		.loc 8 150 4 is_stmt 0 view .LVU169
 748 000a 0A68     		ldr	r2, [r1]
 749              	.LVL55:
 750              		.loc 8 150 4 view .LVU170
 751              	.LBE389:
 752              	.LBE388:
 753              	.LBE387:
 754              		.loc 9 175 3 is_stmt 1 view .LVU171
 755              	.LBB392:
 756              	.LBB391:
 757              	.LBB390:
 758              		.loc 8 150 4 is_stmt 0 view .LVU172
 759 000c 1A60     		str	r2, [r3]
 760              	.LVL56:
 761              		.loc 8 150 4 view .LVU173
 762              	.LBE390:
 763              	.LBE391:
 764              	.LBE392:
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 765              		.loc 3 117 22 view .LVU174
 766 000e 4368     		ldr	r3, [r0, #4]
 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 767              		.loc 3 117 6 view .LVU175
 768 0010 0433     		adds	r3, r3, #4
 769 0012 4360     		str	r3, [r0, #4]
 770              	.LVL57:
 771              	.L36:
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 772              		.loc 3 125 7 view .LVU176
 773 0014 08BD     		pop	{r3, pc}
 774              	.LVL58:
 775              	.L37:
 776              	.LBB393:
 777              	.LBI393:
 829:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 778              		.loc 4 829 7 is_stmt 1 view .LVU177
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 120


 779              	.LBB394:
 780              	.LBB395:
 781              	.LBI395:
 978:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 782              		.loc 6 978 7 view .LVU178
 978:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_iterator.h ****       : _M_current(__i) { }
 783              		.loc 6 978 7 is_stmt 0 view .LVU179
 784              	.LBE395:
 785              	.LBE394:
 786              	.LBE393:
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 787              		.loc 3 121 21 view .LVU180
 788 0016 0A46     		mov	r2, r1
 789 0018 1946     		mov	r1, r3
 790              	.LVL59:
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #if __cplusplus > 201402L
 791              		.loc 3 121 21 view .LVU181
 792 001a FFF7FEFF 		bl	_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_
 793              	.LVL60:
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\vector.tcc **** #endif
 794              		.loc 3 125 7 view .LVU182
 795 001e F9E7     		b	.L36
 796              		.cfi_endproc
 797              	.LFE1372:
 798              		.fnend
 800              		.section	.text.main,"ax",%progbits
 801              		.align	1
 802              		.global	main
 803              		.syntax unified
 804              		.thumb
 805              		.thumb_func
 806              		.fpu fpv4-sp-d16
 808              	main:
 809              		.fnstart
 810              	.LFB1333:
  69:Core/Src/main.cpp ****   /* USER CODE BEGIN 1 */
 811              		.loc 1 69 1 is_stmt 1 view -0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 16
 814              		@ frame_needed = 0, uses_anonymous_args = 0
 815 0000 00B5     		push	{lr}
 816              		.save {lr}
 817              	.LCFI10:
 818              		.cfi_def_cfa_offset 4
 819              		.cfi_offset 14, -4
 820              		.pad #20
 821 0002 85B0     		sub	sp, sp, #20
 822              	.LCFI11:
 823              		.cfi_def_cfa_offset 24
  71:Core/Src/main.cpp ****   /* USER CODE END 1 */
 824              		.loc 1 71 3 view .LVU184
 825              	.LVL61:
 826              	.LBB465:
 827              	.LBI465:
 828              		.file 11 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
   1:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Allocators -*- C++ -*-
   2:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 121


   3:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Copyright (C) 2001-2020 Free Software Foundation, Inc.
   4:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** //
   5:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // software; you can redistribute it and/or modify it under the
   7:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // terms of the GNU General Public License as published by the
   8:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // any later version.
  10:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  11:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // This library is distributed in the hope that it will be useful,
  12:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // GNU General Public License for more details.
  15:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  16:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  20:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // You should have received a copy of the GNU General Public License and
  21:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** // <http://www.gnu.org/licenses/>.
  24:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  25:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** /*
  26:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * Copyright (c) 1996-1997
  27:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  *
  29:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * that both that copyright notice and this permission notice appear
  33:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * representations about the suitability of this software for any
  35:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  */
  37:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  38:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** /** @file bits/allocator.h
  39:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  *  This is an internal header file, included by other library headers.
  40:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****  */
  42:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  43:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #ifndef _ALLOCATOR_H
  44:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #define _ALLOCATOR_H 1
  45:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  46:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #include <bits/memoryfwd.h>
  48:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
  49:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #include <type_traits>
  50:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
  51:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  52:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  54:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** {
  56:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  58:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   /**
  59:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  @addtogroup allocators
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 122


  60:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  @{
  61:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    */
  62:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  63:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   /// allocator<void> specialization.
  64:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   template<>
  65:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     class allocator<void>
  66:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     {
  67:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     public:
  68:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef void        value_type;
  69:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef size_t      size_type;
  70:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef ptrdiff_t   difference_type;
  71:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus <= 201703L
  72:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef void*       pointer;
  73:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef const void* const_pointer;
  74:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  75:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Tp1>
  76:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	struct rebind
  77:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
  78:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #else
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator() = default;
  80:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  81:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Up>
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	constexpr
  83:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	allocator(const allocator<_Up>&) { }
  84:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif // ! C++20
  85:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  86:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L && __cplusplus <= 201703L
  87:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  88:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  90:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  91:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type is_always_equal;
  92:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  93:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Up, typename... _Args>
  94:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	void
  95:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  96:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
  99:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Up>
 100:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	void
 101:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	destroy(_Up* __p)
 102:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	noexcept(std::is_nothrow_destructible<_Up>::value)
 103:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ __p->~_Up(); }
 104:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif // C++11 to C++17
 105:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     };
 106:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 107:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   /**
 108:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 109:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *
 110:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 111:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  for further details.
 112:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *
 113:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 114:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****    */
 115:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****   template<typename _Tp>
 116:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     class allocator : public __allocator_base<_Tp>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 123


 117:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     {
 118:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****     public:
 119:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef _Tp        value_type;
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef size_t     size_type;
 121:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef ptrdiff_t  difference_type;
 122:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus <= 201703L
 123:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef _Tp*       pointer;
 124:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef const _Tp* const_pointer;
 125:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef _Tp&       reference;
 126:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef const _Tp& const_reference;
 127:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Tp1>
 129:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	struct rebind
 130:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
 131:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 132:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
 134:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 135:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 137:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 138:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       typedef true_type is_always_equal;
 139:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 140:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 141:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 142:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 143:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       _GLIBCXX20_CONSTEXPR
 144:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 829              		.loc 11 144 7 view .LVU185
 830              	.LBB466:
 831              	.LBI466:
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 832              		.loc 8 79 7 view .LVU186
  79:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 833              		.loc 8 79 7 is_stmt 0 view .LVU187
 834              	.LBE466:
 835              	.LBE465:
 836              	.LBB467:
 837              	.LBI467:
 510:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 838              		.loc 4 510 7 is_stmt 1 view .LVU188
 839              	.LBB468:
 840              	.LBB469:
 841              	.LBI469:
1763:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
1764:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
1765:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       // Called by constructors to check initial size.
1766:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       static size_type
1767:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       _S_check_init_len(size_type __n, const allocator_type& __a)
 842              		.loc 4 1767 7 view .LVU189
 843              	.LBB470:
 844              	.LBI470:
 145:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 146:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       _GLIBCXX20_CONSTEXPR
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 845              		.loc 11 147 7 view .LVU190
 846              	.LBB471:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 124


 847              	.LBI471:
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 848              		.loc 8 82 7 view .LVU191
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 849              		.loc 8 82 7 is_stmt 0 view .LVU192
 850              	.LBE471:
 851              	.LBE470:
 852              	.LBB472:
 853              	.LBI472:
 148:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       : __allocator_base<_Tp>(__a) { }
 149:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 150:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cplusplus >= 201103L
 151:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       // Avoid implicit deprecation.
 152:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       allocator& operator=(const allocator&) = default;
 153:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 154:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 155:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       template<typename _Tp1>
 156:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	_GLIBCXX20_CONSTEXPR
 157:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 158:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** 
 159:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #if __cpp_constexpr_dynamic_alloc
 160:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       constexpr
 161:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h **** #endif
 162:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 854              		.loc 11 162 7 is_stmt 1 view .LVU193
 855              	.LBB473:
 856              	.LBI473:
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 857              		.loc 8 89 7 view .LVU194
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 858              		.loc 8 89 7 is_stmt 0 view .LVU195
 859              	.LBE473:
 860              	.LBE472:
 861              	.LBE469:
 862              	.LBB474:
 863              	.LBI474:
 303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       : _M_impl(__a)
 864              		.loc 4 303 7 is_stmt 1 view .LVU196
 865              	.LBB475:
 866              	.LBB476:
 867              	.LBI476:
 136:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _Tp_alloc_type(__a)
 868              		.loc 4 136 2 view .LVU197
 869              	.LBB477:
 870              	.LBB478:
 871              	.LBI478:
 147:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\allocator.h ****       : __allocator_base<_Tp>(__a) { }
 872              		.loc 11 147 7 view .LVU198
 873              	.LBB479:
 874              	.LBI479:
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 875              		.loc 8 82 7 view .LVU199
  82:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 876              		.loc 8 82 7 is_stmt 0 view .LVU200
 877              	.LBE479:
 878              	.LBE478:
 879              	.LBB480:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 125


 880              	.LBI480:
  97:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 881              		.loc 4 97 2 is_stmt 1 view .LVU201
 882              	.LBB481:
 883              	.LBB482:
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 884              		.loc 4 98 47 is_stmt 0 view .LVU202
 885 0004 0023     		movs	r3, #0
 886 0006 0093     		str	r3, [sp]
 887 0008 0193     		str	r3, [sp, #4]
 888 000a 0293     		str	r3, [sp, #8]
 889              	.LVL62:
  98:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	{ }
 890              		.loc 4 98 47 view .LVU203
 891              	.LBE482:
 892              	.LBE481:
 893              	.LBE480:
 894              	.LBE477:
 895              	.LBE476:
 896              	.LBB483:
 897              	.LBI483:
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 898              		.loc 4 359 7 is_stmt 1 view .LVU204
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 899              		.loc 4 359 7 is_stmt 0 view .LVU205
 900              	.LBE483:
 901              	.LBE475:
 902              	.LBE474:
 903              	.LBB484:
 904              	.LBI484:
1603:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 905              		.loc 4 1603 7 is_stmt 1 view .LVU206
 906              	.LBB485:
 907              	.LBB486:
 908              	.LBI486:
 683:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h **** 				allocator<_Tp>&)
 909              		.loc 10 683 5 view .LVU207
 910              	.LBB487:
 911              	.LBI487:
 614:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****     {
 912              		.loc 10 614 5 view .LVU208
 913              	.LBB488:
 914              	.LBB489:
 915              	.LBI489:
 583:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_uninitialized.h ****         {
 916              		.loc 10 583 9 view .LVU209
 917              	.LBB490:
 918              	.LBB491:
 919              	.LBI491:
 262:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 263:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 264:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 265:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 266:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 267:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 268:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 269:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 126


 270:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 271:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 272:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 273:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 274:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 275:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 277:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 278:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 279:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 280:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 281:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__comp(__b, __a))
 282:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 283:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 284:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 285:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 286:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 287:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief This does what you think it does.
 288:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 289:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 290:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 291:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 292:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 293:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 294:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 295:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 296:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 297:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 298:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 299:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline const _Tp&
 300:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 301:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 302:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 303:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__comp(__a, __b))
 304:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __b;
 305:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __a;
 306:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 307:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 308:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 309:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 310:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Iterator>
 311:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 312:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _Iterator
 313:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __niter_base(_Iterator __it)
 314:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 315:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return __it; }
 316:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 317:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 318:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 319:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 320:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _From, typename _To>
 321:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 322:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _From
 323:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 324:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 325:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 326:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // No need to wrap, iterator already has the right type.
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 127


 327:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Iterator>
 328:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 329:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _Iterator
 330:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 331:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return __res; }
 332:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 334:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 337:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // a for loop with an explicit count.
 338:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 339:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 340:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move
 341:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 342:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 343:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 344:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 345:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 346:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 347:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 348:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *__result = *__first;
 349:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 351:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 352:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 354:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Category>
 355:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<true, false, _Category>
 356:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 357:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 358:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 359:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 360:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 361:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 362:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 363:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *__result = std::move(*__first);
 364:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 365:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 366:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 367:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 368:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 369:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 370:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 371:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 372:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 373:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 374:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 375:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 376:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 377:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 378:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 379:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    {
 380:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      *__result = *__first;
 381:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__first;
 382:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__result;
 383:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 128


 384:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 385:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 386:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 387:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 388:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 389:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 390:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 391:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 392:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _II, typename _OI>
 393:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 394:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _OI
 395:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 396:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 397:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 398:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 399:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    {
 400:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      *__result = std::move(*__first);
 401:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__first;
 402:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ++__result;
 403:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    }
 404:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 405:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 406:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 407:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 408:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 409:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove>
 410:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 411:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 412:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _Tp>
 413:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 414:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _Tp*
 415:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 416:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 417:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 418:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 419:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_move_assignable<_Tp>,
 420:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 421:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  // trivial types can have deleted assignment
 422:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 423:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 424:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 425:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  if (_Num)
 426:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 427:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result + _Num;
 428:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 429:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 430:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 431:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 432:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 433:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _CharT>
 434:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct char_traits;
 435:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 436:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 437:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     class istreambuf_iterator;
 438:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 439:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 440:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     class ostreambuf_iterator;
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 129


 441:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 442:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 443:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 444:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 445:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 446:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 447:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 448:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 449:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 450:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 451:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 452:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 453:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 454:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 455:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 456:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				    _CharT*>::__type
 457:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 458:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 459:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 460:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 461:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 462:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 463:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 464:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 465:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 466:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 467:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 468:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 469:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 470:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 471:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 472:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 473:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 474:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 475:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 476:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 477:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
 478:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct _Deque_iterator;
 479:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 480:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 481:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 482:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 483:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 484:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 485:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 486:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 487:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _OI);
 488:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 489:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 490:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 492:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 493:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 494:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 495:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 496:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 497:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 130


 498:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 499:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 500:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 501:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 502:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 503:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 504:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 505:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 506:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 507:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 508:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 509:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 510:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 511:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 512:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 513:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__niter_wrap(__result,
 514:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 515:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					     std::__niter_base(__last),
 516:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					     std::__niter_base(__result)));
 517:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 518:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 519:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 520:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 521:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 522:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 523:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 524:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  _OI);
 525:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 526:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 527:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 528:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 529:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(_II, _II,
 530:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 531:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 532:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 533:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 534:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 535:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 536:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 537:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 538:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 539:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 540:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 541:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 542:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 543:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 544:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 545:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 546:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result + (last - first)
 547:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 548:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 549:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 550:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 551:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 552:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 553:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 554:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 131


 555:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  within [first,last).
 556:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 557:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 558:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 559:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 560:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 561:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 562:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 563:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 564:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 565:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 566:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 567:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 568:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 569:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 570:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 571:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 572:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 573:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 574:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 575:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 576:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 577:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 578:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result An output iterator.
 579:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result + (last - first)
 580:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 581:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 582:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 583:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 584:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 585:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 586:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 587:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 588:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  within [first,last).
 589:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 590:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _II, typename _OI>
 591:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 592:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 593:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 594:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 595:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 596:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 597:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 598:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 599:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 600:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 601:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_a<true>(std::__miter_base(__first),
 602:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				      std::__miter_base(__last), __result);
 603:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 604:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 605:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 606:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #else
 607:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 608:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 609:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 610:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 611:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 132


 612:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 613:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 614:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 615:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 616:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 617:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 618:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  while (__first != __last)
 619:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = *--__last;
 620:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 621:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 622:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 623:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 624:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 625:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Category>
 626:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 627:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 628:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 629:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 630:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 631:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 632:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 633:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  while (__first != __last)
 634:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
 635:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 636:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 637:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 638:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 639:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 640:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 641:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 642:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 643:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 644:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 645:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 646:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 647:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 648:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 649:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __n = __last - __first;
 650:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __n > 0; --__n)
 651:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = *--__last;
 652:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 653:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 654:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 655:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 656:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 657:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<>
 658:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 659:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 660:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _BI1, typename _BI2>
 661:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 662:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _BI2
 663:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 664:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 665:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type
 666:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __n = __last - __first;
 667:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __n > 0; --__n)
 668:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *--__result = std::move(*--__last);
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 133


 669:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result;
 670:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 671:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 672:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 673:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 674:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove>
 675:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 676:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 677:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       template<typename _Tp>
 678:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 679:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	static _Tp*
 680:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 681:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 682:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 683:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  using __assignable = conditional<_IsMove,
 684:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_move_assignable<_Tp>,
 685:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					   is_copy_assignable<_Tp>>;
 686:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  // trivial types can have deleted assignment
 687:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  static_assert( __assignable::type::value, "type is not assignable" );
 688:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 689:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 690:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  if (_Num)
 691:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 692:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return __result - _Num;
 693:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 694:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     };
 695:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 696:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 697:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 698:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 699:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 700:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 701:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 702:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 703:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 704:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return std::__copy_move_backward<_IsMove, false, _Category>::
 705:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  __copy_move_b(__first, __last, __result);
 706:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 707:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_backward<_IsMove,
 708:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				       __memcpyable<_BI2, _BI1>::__value,
 709:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				       _Category>::__copy_move_b(__first,
 710:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 								 __last,
 711:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 								 __result);
 712:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 713:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 714:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 715:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 716:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 717:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 718:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 719:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 720:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 721:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 722:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 723:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 724:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 725:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			    _OI);
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 134


 726:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 727:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 728:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 729:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 730:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(
 731:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 732:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 733:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			_GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 734:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 735:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 736:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 737:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 738:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 739:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a1(_II, _II,
 740:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 			    _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 741:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 742:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 743:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 744:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
 745:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(_II __first, _II __last, _OI __result)
 746:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 747:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__niter_wrap(__result,
 748:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		std::__copy_move_backward_a1<_IsMove>
 749:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 750:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		   std::__niter_base(__result)));
 751:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 752:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 753:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 754:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 755:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _OI
 756:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(
 757:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 758:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 759:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		_OI);
 760:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 761:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 762:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 763:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 764:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(_II, _II,
 765:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 766:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 767:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<bool _IsMove,
 768:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 769:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 770:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 771:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __copy_move_backward_a(
 772:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 773:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 774:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 		const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 775:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 776:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 777:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 778:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 779:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 780:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 781:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 782:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result - (last - first)
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 135


 783:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 784:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 785:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 786:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 787:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 788:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 789:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).
 790:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 791:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 792:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 793:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 794:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _BI1, typename _BI2>
 795:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 796:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 797:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 798:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 799:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 800:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 801:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 802:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 803:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 804:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 805:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 806:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 807:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
 808:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 809:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 810:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 811:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
 812:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 813:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 814:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 815:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 816:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 817:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 818:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   result - (last - first)
 819:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 820:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 821:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 822:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 823:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 824:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 825:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  optimizations such as unrolling).
 826:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 827:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 828:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 829:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 830:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _BI1, typename _BI2>
 831:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 832:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _BI2
 833:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 834:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 835:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 836:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 837:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 838:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 839:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 136


 840:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 841:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_decrement_range(__first, __last, __result);
 842:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 843:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return std::__copy_move_backward_a<true>(std::__miter_base(__first),
 844:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					       std::__miter_base(__last),
 845:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 					       __result);
 846:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 847:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 848:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 849:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #else
 850:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 851:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 852:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 853:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 854:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 855:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
 856:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 857:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 858:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 859:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 860:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __first != __last; ++__first)
 861:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __value;
 862:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 863:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 864:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 865:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 866:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
 867:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 868:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(_ForwardIterator __first, _ForwardIterator __last,
 869:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 870:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 871:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       const _Tp __tmp = __value;
 872:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __first != __last; ++__first)
 873:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
 874:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 875:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 876:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Specialization: for char types we can use memset.
 877:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp>
 878:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 879:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
 880:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 881:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)
 882:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 883:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       const _Tp __tmp = __c;
 884:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cpp_lib_is_constant_evaluated
 885:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 886:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	{
 887:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  for (; __first != __last; ++__first)
 888:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	    *__first = __tmp;
 889:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	  return;
 890:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	}
 891:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 892:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (const size_t __len = __last - __first)
 893:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 894:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 895:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 896:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Ite, typename _Cont, typename _Tp>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 137


 897:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 898:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 899:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,
 900:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      ::__gnu_cxx::__normal_iterator<_Ite, _Cont> __last,
 901:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _Tp& __value)
 902:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first.base(), __last.base(), __value); }
 903:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 904:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Tp, typename _VTp>
 905:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     void
 906:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 907:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,
 908:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	      const _VTp&);
 909:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 910:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _FIte, typename _Tp>
 911:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 912:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 913:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a(_FIte __first, _FIte __last, const _Tp& __value)
 914:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     { std::__fill_a1(__first, __last, __value); }
 915:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 916:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Tp>
 917:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     void
 918:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 919:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 920:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	     const _Tp&);
 921:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 922:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
 923:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 924:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 925:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  A forward iterator.
 926:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __last   A forward iterator.
 927:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 928:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   Nothing.
 929:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
 930:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 931:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 932:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  to @c memset or @c wmemset.
 933:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
 934:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 935:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 936:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline void
 937:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 938:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
 939:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       // concept requirements
 940:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 941:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 				  _ForwardIterator>)
 942:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 943:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 944:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       std::__fill_a(__first, __last, __value);
 945:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
 946:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 947:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
 948:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR int
 949:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(int __n) { return __n; }
 950:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned
 951:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __n) { return __n; }
 952:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 953:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(long __n) { return __n; }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 138


 954:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long
 955:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned long __n) { return __n; }
 956:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 957:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(long long __n) { return __n; }
 958:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned long long
 959:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned long long __n) { return __n; }
 960:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 961:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_0)
 962:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0
 963:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 964:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0
 965:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }
 966:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 967:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_1)
 968:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1
 969:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 970:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1
 971:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }
 972:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 973:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_2)
 974:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2
 975:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 976:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2
 977:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }
 978:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 979:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if defined(__GLIBCXX_TYPE_INT_N_3)
 980:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3
 981:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 982:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3
 983:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }
 984:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 985:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 986:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 987:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(float __n) { return __n; }
 988:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 989:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(double __n) { return __n; }
 990:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 991:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(long double __n) { return __n; }
 992:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if !defined(__STRICT_ANSI__) && defined(_GLIBCXX_USE_FLOAT128)
 993:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long long
 994:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   __size_to_integer(__float128 __n) { return __n; }
 995:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
 996:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
 997:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 998:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 999:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
1000:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
1001:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1002:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1003:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1004:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __value;
1005:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first;
1006:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1007:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1008:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1009:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1010:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline typename
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 139


1011:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
1012:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)
1013:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1014:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       const _Tp __tmp = __value;
1015:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       for (; __n > 0; --__n, (void) ++__first)
1016:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	*__first = __tmp;
1017:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first;
1018:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1019:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1020:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _Ite, typename _Seq, typename _Cat, typename _Size,
1021:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	   typename _Tp>
1022:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
1023:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,
1024:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       _Size __n, const _Tp& __value,
1025:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::input_iterator_tag);
1026:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1027:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1028:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1029:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OutputIterator
1030:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1031:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::output_iterator_tag)
1032:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1033:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
1034:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1035:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
1036:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1037:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1038:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1039:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1040:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1041:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OutputIterator
1042:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1043:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::input_iterator_tag)
1044:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1045:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
1046:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1047:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
1048:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __fill_n_a1(__first, __n, __value);
1049:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
1050:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1051:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
1052:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1053:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OutputIterator
1054:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,
1055:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
1056:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     {
1057:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #if __cplusplus >= 201103L
1058:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       static_assert(is_integral<_Size>{}, "fill_n must pass integral size");
1059:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** #endif
1060:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       if (__n <= 0)
1061:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	return __first;
1062:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1063:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       __glibcxx_requires_can_increment(__first, __n);
1064:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1065:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       std::__fill_a(__first, __first + __n, __value);
1066:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****       return __first + __n;
1067:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     }
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 140


1068:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 
1069:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   /**
1070:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
1071:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
1072:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __first  An output iterator.
1073:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __n      The count of copies to perform.
1074:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
1075:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  @return   The iterator at first+n.
1076:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
1077:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
1078:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
1079:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  to @c memset or @c wmemset.
1080:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *
1081:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****    *  If @p __n is negative, the function does nothing.
1082:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   */
1083:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1084:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // DR 865. More algorithms that throw away information
1085:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   // DR 426. search_n(), fill_n(), and generate_n() with negative n
1086:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
1087:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
1088:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     inline _OI
1089:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 920              		.loc 5 1089 5 view .LVU210
 921              		.loc 5 1089 5 is_stmt 0 view .LVU211
 922              	.LBE491:
 923              	.LBE490:
 924              	.LBE489:
 925              	.LBE488:
 926              	.LBE487:
 927              	.LBE486:
 928              	.LBE485:
 929              	.LBE484:
 930              	.LBE468:
 931              	.LBE467:
 951:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h ****   inline _GLIBCXX_CONSTEXPR long
 932              		.loc 5 951 37 is_stmt 1 view .LVU212
 933              	.LBB503:
 934              	.LBB502:
 935              	.LBB501:
 936              	.LBB500:
 937              	.LBB499:
 938              	.LBB498:
 939              	.LBB497:
 940              	.LBB496:
 941              	.LBB495:
 942              	.LBB494:
 943              	.LBB492:
 944              	.LBB493:
 945              	.LBI493:
1054:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 946              		.loc 5 1054 5 view .LVU213
1054:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_algobase.h **** 	       std::random_access_iterator_tag)
 947              		.loc 5 1054 5 is_stmt 0 view .LVU214
 948              	.LBE493:
 949              	.LBE492:
 950              	.LBE494:
 951              	.LBE495:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 141


 952              	.LBE496:
 953              	.LBE497:
 954              	.LBE498:
 955              	.LBE499:
 956              	.LBE500:
 957              	.LBE501:
 958              	.LBE502:
 959              	.LBE503:
 960              	.LBB504:
 961              	.LBI504:
 962              		.loc 11 162 7 is_stmt 1 view .LVU215
 963              	.LBB505:
 964              	.LBI505:
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 965              		.loc 8 89 7 view .LVU216
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 966              		.loc 8 89 7 is_stmt 0 view .LVU217
 967              	.LBE505:
 968              	.LBE504:
  77:Core/Src/main.cpp ****   /* USER CODE BEGIN Init */
 969              		.loc 1 77 3 is_stmt 1 view .LVU218
 970              	.LEHB0:
  77:Core/Src/main.cpp ****   /* USER CODE BEGIN Init */
 971              		.loc 1 77 11 is_stmt 0 view .LVU219
 972 000c FFF7FEFF 		bl	HAL_Init
 973              	.LVL63:
  83:Core/Src/main.cpp **** 
 974              		.loc 1 83 3 is_stmt 1 view .LVU220
  83:Core/Src/main.cpp **** 
 975              		.loc 1 83 21 is_stmt 0 view .LVU221
 976 0010 FFF7FEFF 		bl	_Z18SystemClock_Configv
 977              	.LVL64:
  90:Core/Src/main.cpp ****   MX_ADC1_Init();
 978              		.loc 1 90 3 is_stmt 1 view .LVU222
  90:Core/Src/main.cpp ****   MX_ADC1_Init();
 979              		.loc 1 90 15 is_stmt 0 view .LVU223
 980 0014 FFF7FEFF 		bl	MX_GPIO_Init
 981              	.LVL65:
  91:Core/Src/main.cpp ****   MX_TIM2_Init();
 982              		.loc 1 91 3 is_stmt 1 view .LVU224
  91:Core/Src/main.cpp ****   MX_TIM2_Init();
 983              		.loc 1 91 15 is_stmt 0 view .LVU225
 984 0018 FFF7FEFF 		bl	MX_ADC1_Init
 985              	.LVL66:
  92:Core/Src/main.cpp ****   MX_TIM4_Init();
 986              		.loc 1 92 3 is_stmt 1 view .LVU226
  92:Core/Src/main.cpp ****   MX_TIM4_Init();
 987              		.loc 1 92 15 is_stmt 0 view .LVU227
 988 001c FFF7FEFF 		bl	MX_TIM2_Init
 989              	.LVL67:
  93:Core/Src/main.cpp ****   MX_TIM9_Init();
 990              		.loc 1 93 3 is_stmt 1 view .LVU228
  93:Core/Src/main.cpp ****   MX_TIM9_Init();
 991              		.loc 1 93 15 is_stmt 0 view .LVU229
 992 0020 FFF7FEFF 		bl	MX_TIM4_Init
 993              	.LVL68:
  94:Core/Src/main.cpp ****   MX_TIM12_Init();
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 142


 994              		.loc 1 94 3 is_stmt 1 view .LVU230
  94:Core/Src/main.cpp ****   MX_TIM12_Init();
 995              		.loc 1 94 15 is_stmt 0 view .LVU231
 996 0024 FFF7FEFF 		bl	MX_TIM9_Init
 997              	.LVL69:
  95:Core/Src/main.cpp ****   MX_UART4_Init();
 998              		.loc 1 95 3 is_stmt 1 view .LVU232
  95:Core/Src/main.cpp ****   MX_UART4_Init();
 999              		.loc 1 95 16 is_stmt 0 view .LVU233
 1000 0028 FFF7FEFF 		bl	MX_TIM12_Init
 1001              	.LVL70:
  96:Core/Src/main.cpp ****   MX_SPI1_Init();
 1002              		.loc 1 96 3 is_stmt 1 view .LVU234
  96:Core/Src/main.cpp ****   MX_SPI1_Init();
 1003              		.loc 1 96 16 is_stmt 0 view .LVU235
 1004 002c FFF7FEFF 		bl	MX_UART4_Init
 1005              	.LVL71:
  97:Core/Src/main.cpp ****   MX_TIM6_Init();
 1006              		.loc 1 97 3 is_stmt 1 view .LVU236
  97:Core/Src/main.cpp ****   MX_TIM6_Init();
 1007              		.loc 1 97 15 is_stmt 0 view .LVU237
 1008 0030 FFF7FEFF 		bl	MX_SPI1_Init
 1009              	.LVL72:
  98:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 1010              		.loc 1 98 3 is_stmt 1 view .LVU238
  98:Core/Src/main.cpp ****   /* USER CODE BEGIN 2 */
 1011              		.loc 1 98 15 is_stmt 0 view .LVU239
 1012 0034 FFF7FEFF 		bl	MX_TIM6_Init
 1013              	.LVL73:
 100:Core/Src/main.cpp ****   /* USER CODE END 2 */
 1014              		.loc 1 100 3 is_stmt 1 view .LVU240
 100:Core/Src/main.cpp ****   /* USER CODE END 2 */
 1015              		.loc 1 100 15 is_stmt 0 view .LVU241
 1016 0038 0123     		movs	r3, #1
 1017 003a 0393     		str	r3, [sp, #12]
 1018              	.LVL74:
 1019              	.LBB506:
 1020              	.LBI506:
1203:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
 1021              		.loc 4 1203 7 is_stmt 1 view .LVU242
 1022              	.LBB507:
1204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 1023              		.loc 4 1204 21 is_stmt 0 view .LVU243
 1024 003c 03A9     		add	r1, sp, #12
 1025              	.LVL75:
1204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 1026              		.loc 4 1204 21 view .LVU244
 1027 003e 6846     		mov	r0, sp
 1028 0040 FFF7FEFF 		bl	_ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_
 1029              	.LVL76:
 1030              	.LEHE0:
 1031              	.L41:
1204:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 
 1032              		.loc 4 1204 21 view .LVU245
 1033              	.LBE507:
 1034              	.LBE506:
 105:Core/Src/main.cpp ****   {
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 143


 1035              		.loc 1 105 3 is_stmt 1 discriminator 1 view .LVU246
 105:Core/Src/main.cpp ****   {
 1036              		.loc 1 105 3 discriminator 1 view .LVU247
 1037 0044 FEE7     		b	.L41
 1038              	.LVL77:
 1039              	.L44:
 1040              	.LBB508:
 1041              	.LBI508:
 678:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 1042              		.loc 4 678 7 view .LVU248
 1043              	.LBB509:
 1044              	.LBB510:
 1045              	.LBI510:
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 1046              		.loc 4 276 7 view .LVU249
 276:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       { return this->_M_impl; }
 1047              		.loc 4 276 7 is_stmt 0 view .LVU250
 1048              	.LBE510:
 1049              	.LBB511:
 1050              	.LBI511:
 508:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		  _Args&&... __args)
 509:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 510:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 511:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 512:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 513:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 514:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 515:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 516:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 517:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 518:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 519:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 520:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 521:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 522:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *
 523:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 524:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 525:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       template<typename _Up>
 526:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 527:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 528:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 529:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 530:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 531:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  __a.destroy(__p);
 532:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 533:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  std::destroy_at(__p);
 534:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 535:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 536:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 537:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 538:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  The maximum supported allocation size
 539:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __a  An allocator.
 540:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __a.max_size()
 541:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 542:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 543:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 544:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       {
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 144


 545:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus <= 201703L
 546:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return __a.max_size();
 547:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 548:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 549:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 550:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       }
 551:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 552:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       /**
 553:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 554:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 555:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****        *  @return @c __rhs
 556:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       */
 557:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 558:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 559:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { return __rhs; }
 560:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     };
 561:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 562:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus < 201703L
 563:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 564:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void
 565:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 566:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { __one = __two; }
 567:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 568:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 569:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void
 570:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 571:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { }
 572:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 573:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 574:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 575:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 576:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 577:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 578:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 579:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef typename __traits::propagate_on_container_copy_assignment __pocca;
 580:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201703L
 581:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       if constexpr (__pocca::value)
 582:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	__one = __two;
 583:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 584:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 585:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 586:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 587:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 588:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 589:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     constexpr _Alloc
 590:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 591:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 592:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 593:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 594:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 595:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 596:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus < 201703L
 597:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 598:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 599:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { __one = std::move(__two); }
 600:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 601:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 145


 602:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 603:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { }
 604:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 605:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 606:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 607:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 608:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 609:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 610:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 611:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef typename __traits::propagate_on_container_move_assignment __pocma;
 612:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201703L
 613:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       if constexpr (__pocma::value)
 614:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	__one = std::move(__two);
 615:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 616:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 617:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 618:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 619:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 620:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus < 201703L
 621:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 622:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 623:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 624:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       using std::swap;
 625:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       swap(__one, __two);
 626:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 627:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 628:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 629:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 630:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { }
 631:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 632:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 633:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 634:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 635:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 636:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 637:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 638:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       typedef typename __traits::propagate_on_container_swap __pocs;
 639:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus >= 201703L
 640:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       if constexpr (__pocs::value)
 641:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	{
 642:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  using std::swap;
 643:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	  swap(__one, __two);
 644:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	}
 645:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 646:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 647:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 648:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 649:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 650:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 651:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 652:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	   typename = void>
 653:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_alloc_insertable_impl
 654:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : false_type
 655:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 656:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 657:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 658:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 146


 659:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 660:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 661:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 		   std::declval<_Tp>()))>>
 662:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : true_type
 663:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 664:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 665:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 666:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 667:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 668:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 669:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_copy_insertable
 670:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 671:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 672:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 673:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 674:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 675:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 676:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 677:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : is_copy_constructible<_Tp>
 678:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 679:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 680:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 681:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 682:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 683:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 684:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_move_insertable
 685:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 686:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 687:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 688:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 689:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Tp>
 690:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 691:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : is_move_constructible<_Tp>
 692:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     { };
 693:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 694:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   // Trait to detect Allocator-like types.
 695:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc, typename = void>
 696:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_allocator : false_type { };
 697:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 698:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 699:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     struct __is_allocator<_Alloc,
 700:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 701:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 702:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     : true_type { };
 703:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 704:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 705:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     using _RequireAllocator
 706:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 707:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 708:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _Alloc>
 709:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     using _RequireNotAllocator
 710:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 711:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif // C++11
 712:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 713:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   /**
 714:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 715:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 147


 716:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 717:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****    */
 718:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 719:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 720:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     void
 721:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 722:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	     _Allocator& __alloc)
 723:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     {
 724:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       for (; __first != __last; ++__first)
 725:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #if __cplusplus < 201103L
 726:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 727:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #else
 728:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 729:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 					      std::__addressof(*__first));
 730:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** #endif
 731:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     }
 732:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h **** 
 733:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 734:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     inline void
 735:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 1051              		.loc 7 735 5 is_stmt 1 view .LVU251
 1052              		.loc 7 735 5 is_stmt 0 view .LVU252
 1053              	.LBE511:
 1054              	.LBB512:
 1055              	.LBI512:
 333:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 1056              		.loc 4 333 7 is_stmt 1 view .LVU253
 1057              	.LBB513:
 335:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 1058              		.loc 4 335 15 is_stmt 0 view .LVU254
 1059 0046 0098     		ldr	r0, [sp]
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1060              		.loc 4 336 17 view .LVU255
 1061 0048 029B     		ldr	r3, [sp, #8]
 336:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       }
 1062              		.loc 4 336 35 view .LVU256
 1063 004a 191A     		subs	r1, r3, r0
 1064              	.LVL78:
 1065              	.LBB514:
 1066              	.LBI514:
 350:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h ****       {
 1067              		.loc 4 350 7 is_stmt 1 view .LVU257
 1068              	.LBB515:
 353:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1069              		.loc 4 353 2 is_stmt 0 view .LVU258
 1070 004c 08B1     		cbz	r0, .L43
 1071              	.LVL79:
 1072              	.LBB516:
 1073              	.LBI516:
 491:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1074              		.loc 7 491 7 is_stmt 1 view .LVU259
 1075              	.LBB517:
 1076              	.LBB518:
 1077              	.LBI518:
 120:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h ****       {
 1078              		.loc 8 120 7 view .LVU260
 1079              	.LBB519:
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 148


 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_sized_deallocation
 1080              		.loc 8 133 19 is_stmt 0 view .LVU261
 1081 004e FFF7FEFF 		bl	_ZdlPvj
 1082              	.LVL80:
 1083              	.L43:
 133:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** #if __cpp_sized_deallocation
 1084              		.loc 8 133 19 view .LVU262
 1085              	.LBE519:
 1086              	.LBE518:
 1087              	.LBE517:
 1088              	.LBE516:
 1089              	.LBE515:
 1090              	.LBE514:
 1091              	.LBB520:
 1092              	.LBI520:
 128:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\bits\stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 1093              		.loc 4 128 14 is_stmt 1 view .LVU263
 1094              	.LBB521:
 1095              	.LBB522:
 1096              	.LBI522:
 1097              		.loc 11 162 7 view .LVU264
 1098              	.LBB523:
 1099              	.LBI523:
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 1100              		.loc 8 89 7 view .LVU265
 1101              	.LEHB1:
  89:c:\tools\gcc-arm-none-eabi-10-2020-q4-major\arm-none-eabi\include\c++\10.2.1\ext\new_allocator.h **** 
 1102              		.loc 8 89 7 is_stmt 0 view .LVU266
 1103 0052 FFF7FEFF 		bl	__cxa_end_cleanup
 1104              	.LVL81:
 1105              	.LEHE1:
 1106              	.LBE523:
 1107              	.LBE522:
 1108              	.LBE521:
 1109              	.LBE520:
 1110              	.LBE513:
 1111              	.LBE512:
 1112              	.LBE509:
 1113              	.LBE508:
 1114              		.cfi_endproc
 1115              	.LFE1333:
 1116              		.global	__gxx_personality_v0
 1117              		.personality	__gxx_personality_v0
 1118              		.handlerdata
 1119              	.LLSDA1333:
 1120 0008 FF       		.byte	0xff
 1121 0009 FF       		.byte	0xff
 1122 000a 01       		.byte	0x1
 1123 000b 08       		.uleb128 .LLSDACSE1333-.LLSDACSB1333
 1124              	.LLSDACSB1333:
 1125 000c 0C       		.uleb128 .LEHB0-.LFB1333
 1126 000d 38       		.uleb128 .LEHE0-.LEHB0
 1127 000e 46       		.uleb128 .L44-.LFB1333
 1128 000f 00       		.uleb128 0
 1129 0010 52       		.uleb128 .LEHB1-.LFB1333
 1130 0011 04       		.uleb128 .LEHE1-.LEHB1
 1131 0012 00       		.uleb128 0
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 149


 1132 0013 00       		.uleb128 0
 1133              	.LLSDACSE1333:
 1134              		.section	.text.main
 1135              		.fnend
 1137              		.text
 1138              	.Letext0:
 1139              		.file 12 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\machine\\_default
 1140              		.file 13 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 1141              		.file 14 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f405xx.h"
 1142              		.file 15 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\lib\\gcc\\arm-none-eabi\\10.2.1\\include\
 1143              		.file 16 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1144              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1145              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1146              		.file 19 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1147              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1148              		.file 21 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\cstd
 1149              		.file 22 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 1150              		.file 23 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\cmat
 1151              		.file 24 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\type
 1152              		.file 25 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\arm-
 1153              		.file 26 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 1154              		.file 27 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 1155              		.file 28 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\debu
 1156              		.file 29 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 1157              		.file 30 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 1158              		.file 31 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\init
 1159              		.file 32 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 1160              		.file 33 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 1161              		.file 34 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\bits
 1162              		.file 35 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\ext\
 1163              		.file 36 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\stdlib.h"
 1164              		.file 37 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\stdl
 1165              		.file 38 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\math.h"
 1166              		.file 39 "c:\\tools\\gcc-arm-none-eabi-10-2020-q4-major\\arm-none-eabi\\include\\c++\\10.2.1\\math
 1167              		.file 40 "Core/Inc/usart.h"
 1168              		.file 41 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1169              		.file 42 "Core/Inc/gpio.h"
 1170              		.file 43 "Core/Inc/adc.h"
 1171              		.file 44 "Core/Inc/tim.h"
 1172              		.file 45 "Core/Inc/spi.h"
 1173              		.file 46 "<built-in>"
ARM GAS  C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s 			page 150


DEFINED SYMBOLS
                            *ABS*:00000000 main.cpp
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:18     .text._Z6_writeiPci:00000000 $t
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:26     .text._Z6_writeiPci:00000000 _Z6_writeiPci
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:63     .text._Z6_writeiPci:00000014 $d
    .ARM.exidx.text._Z6_writeiPci:00000000 $d
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:69     .text.Error_Handler:00000000 $t
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:76     .text.Error_Handler:00000000 Error_Handler
    .ARM.exidx.text.Error_Handler:00000000 $d
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:110    .text._Z18SystemClock_Configv:00000000 $t
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:117    .text._Z18SystemClock_Configv:00000000 _Z18SystemClock_Configv
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:270    .text._Z18SystemClock_Configv:0000009c $d
.ARM.exidx.text._Z18SystemClock_Configv:00000000 $d
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:277    .rodata._ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.str1.4:00000000 $d
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:281    .text._ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_:00000000 $t
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:288    .text._ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_:00000000 _ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:698    .text._ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_:000000d0 $d
.ARM.exidx.text._ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_:00000000 $d
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:710    .text._ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_:00000000 $t
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:717    .text._ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_:00000000 _ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_
.ARM.extab.text._ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_:00000000 $d
.ARM.exidx.text._ZNSt6vectorIiSaIiEE12emplace_backIJiEEEvDpOT_:00000000 $d
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:801    .text.main:00000000 $t
C:\Users\saite\AppData\Local\Temp\ccxfQYnf.s:808    .text.main:00000000 main
             .ARM.extab.text.main:00000000 $d
             .ARM.exidx.text.main:00000000 $d

UNDEFINED SYMBOLS
HAL_UART_Transmit
huart4
__aeabi_unwind_cpp_pr0
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
_Znwj
_ZdlPvj
_ZSt20__throw_length_errorPKc
_ZSt17__throw_bad_allocv
memmove
__aeabi_unwind_cpp_pr1
HAL_Init
MX_GPIO_Init
MX_ADC1_Init
MX_TIM2_Init
MX_TIM4_Init
MX_TIM9_Init
MX_TIM12_Init
MX_UART4_Init
MX_SPI1_Init
MX_TIM6_Init
__cxa_end_cleanup
__gxx_personality_v0
